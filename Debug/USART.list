
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f0  080036f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036f8  080036f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003770  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003770  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e1f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a96  00000000  00000000  00026ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00028958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  00029118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001776a  00000000  00000000  000297f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ba7  00000000  00000000  00040f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008df05  00000000  00000000  00049b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d0  00000000  00000000  000d7a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003678 	.word	0x08003678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003678 	.word	0x08003678

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__NVIC_GetPriorityGrouping+0x18>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	f003 0307 	and.w	r3, r3, #7
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000640:	b480      	push	{r7}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f1c3 0307 	rsb	r3, r3, #7
 800065a:	2b04      	cmp	r3, #4
 800065c:	bf28      	it	cs
 800065e:	2304      	movcs	r3, #4
 8000660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3304      	adds	r3, #4
 8000666:	2b06      	cmp	r3, #6
 8000668:	d902      	bls.n	8000670 <NVIC_EncodePriority+0x30>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b03      	subs	r3, #3
 800066e:	e000      	b.n	8000672 <NVIC_EncodePriority+0x32>
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	f04f 31ff 	mov.w	r1, #4294967295
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43d9      	mvns	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	4313      	orrs	r3, r2
         );
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40023800 	.word	0x40023800

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80006dc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80006e0:	f7ff ffe2 	bl	80006a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 80006e4:	f7ff ff56 	bl	8000594 <__NVIC_GetPriorityGrouping>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2104      	movs	r1, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffa6 	bl	8000640 <NVIC_EncodePriority>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4619      	mov	r1, r3
 80006f8:	2010      	movs	r0, #16
 80006fa:	f7ff ff77 	bl	80005ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006fe:	2010      	movs	r0, #16
 8000700:	f7ff ff56 	bl	80005b0 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8000704:	f7ff ff46 	bl	8000594 <__NVIC_GetPriorityGrouping>
 8000708:	4603      	mov	r3, r0
 800070a:	2200      	movs	r2, #0
 800070c:	2104      	movs	r1, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff96 	bl	8000640 <NVIC_EncodePriority>
 8000714:	4603      	mov	r3, r0
 8000716:	4619      	mov	r1, r3
 8000718:	2011      	movs	r0, #17
 800071a:	f7ff ff67 	bl	80005ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800071e:	2011      	movs	r0, #17
 8000720:	f7ff ff46 	bl	80005b0 <__NVIC_EnableIRQ>

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_GPIO_Init+0x4c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t str_buf[24]={0}; //tao buffer chua vua du hello
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 ff76 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f826 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f7ff ffc6 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 800079c:	f7ff ff9c 	bl	80006d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 fe0a 	bl	80013b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   UART_Config();
 80007a4:	f000 fee8 	bl	8001578 <UART_Config>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  memset(str_buf,24,0x00);// thay doi gia tri vung nho
	  sprintf(str_buf,Test_Data,counter++);
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	490b      	ldr	r1, [pc, #44]	; (80007dc <main+0x64>)
 80007b0:	600a      	str	r2, [r1, #0]
 80007b2:	4638      	mov	r0, r7
 80007b4:	461a      	mov	r2, r3
 80007b6:	490a      	ldr	r1, [pc, #40]	; (80007e0 <main+0x68>)
 80007b8:	f002 fafe 	bl	8002db8 <siprintf>

	  UART_Send_String(str_buf,strlen(str_buf));
 80007bc:	463b      	mov	r3, r7
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd0e 	bl	80001e0 <strlen>
 80007c4:	4602      	mov	r2, r0
 80007c6:	463b      	mov	r3, r7
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fee4 	bl	8001598 <UART_Send_String>
	  HAL_Delay(1000);
 80007d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d4:	f000 ffc6 	bl	8001764 <HAL_Delay>
  {
 80007d8:	e7e6      	b.n	80007a8 <main+0x30>
 80007da:	bf00      	nop
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	08003690 	.word	0x08003690

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fad8 	bl	8002da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <SystemClock_Config+0xc8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a26      	ldr	r2, [pc, #152]	; (80008ac <SystemClock_Config+0xc8>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <SystemClock_Config+0xc8>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <SystemClock_Config+0xcc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <SystemClock_Config+0xcc>)
 800082e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <SystemClock_Config+0xcc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000858:	2348      	movs	r3, #72	; 0x48
 800085a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f885 	bl	8001978 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000874:	f000 f81e 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	230f      	movs	r3, #15
 800087a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2302      	movs	r3, #2
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2102      	movs	r1, #2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fae7 	bl	8001e68 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008a0:	f000 f808 	bl	80008b4 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000946:	60da      	str	r2, [r3, #12]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0320 	and.w	r3, r3, #32
 8000964:	2b20      	cmp	r3, #32
 8000966:	bf0c      	ite	eq
 8000968:	2301      	moveq	r3, #1
 800096a:	2300      	movne	r3, #0
 800096c:	b2db      	uxtb	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	2b40      	cmp	r3, #64	; 0x40
 800098c:	bf0c      	ite	eq
 800098e:	2301      	moveq	r3, #1
 8000990:	2300      	movne	r3, #0
 8000992:	b2db      	uxtb	r3, r3
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b0:	2b80      	cmp	r3, #128	; 0x80
 80009b2:	bf0c      	ite	eq
 80009b4:	2301      	moveq	r3, #1
 80009b6:	2300      	movne	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f06f 0220 	mvn.w	r2, #32
 80009f0:	601a      	str	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b089      	sub	sp, #36	; 0x24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	330c      	adds	r3, #12
 8000a0a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	e853 3f00 	ldrex	r3, [r3]
 8000a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	330c      	adds	r3, #12
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	61ba      	str	r2, [r7, #24]
 8000a24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a26:	6979      	ldr	r1, [r7, #20]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	e841 2300 	strex	r3, r2, [r1]
 8000a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1e7      	bne.n	8000a06 <LL_USART_DisableIT_TXE+0x8>
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	3724      	adds	r7, #36	; 0x24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	b2db      	uxtb	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	460b      	mov	r3, r1
 8000a68:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000a6a:	78fa      	ldrb	r2, [r7, #3]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	605a      	str	r2, [r3, #4]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 fe2c 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1))
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <DMA1_Stream6_IRQHandler+0x1c>)
 8000ae6:	f7ff ff13 	bl	8000910 <LL_DMA_IsActiveFlag_TC6>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <DMA1_Stream6_IRQHandler+0x16>
	{
		LL_DMA_ClearFlag_TC6(DMA1);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <DMA1_Stream6_IRQHandler+0x1c>)
 8000af2:	f7ff ff21 	bl	8000938 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40026000 	.word	0x40026000

08000b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


	uint8_t c =0 ;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]
	if(LL_USART_IsActiveFlag_TC(USART2))
 8000b0a:	4826      	ldr	r0, [pc, #152]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b0c:	f7ff ff35 	bl	800097a <LL_USART_IsActiveFlag_TC>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <USART2_IRQHandler+0x1c>
	{
		LL_USART_ClearFlag_TC(USART2);
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b18:	f7ff ff55 	bl	80009c6 <LL_USART_ClearFlag_TC>
	}

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8000b1c:	4821      	ldr	r0, [pc, #132]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b1e:	f7ff ff19 	bl	8000954 <LL_USART_IsActiveFlag_RXNE>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d015      	beq.n	8000b54 <USART2_IRQHandler+0x54>
	{
		//asm("NOP");
		LL_USART_ClearFlag_RXNE(USART2);
 8000b28:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b2a:	f7ff ff5a 	bl	80009e2 <LL_USART_ClearFlag_RXNE>
		if(uart_rx_buf_ptr >= 128U){
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <USART2_IRQHandler+0xa8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b7f      	cmp	r3, #127	; 0x7f
 8000b34:	d902      	bls.n	8000b3c <USART2_IRQHandler+0x3c>
			uart_rx_buf_ptr=0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <USART2_IRQHandler+0xa8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
		}
		uart_rx_buffer[uart_rx_buf_ptr++]= LL_USART_ReceiveData8(USART2);
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <USART2_IRQHandler+0xa8>)
 8000b3e:	681c      	ldr	r4, [r3, #0]
 8000b40:	1c63      	adds	r3, r4, #1
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <USART2_IRQHandler+0xa8>)
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b48:	f7ff ff7c 	bl	8000a44 <LL_USART_ReceiveData8>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <USART2_IRQHandler+0xac>)
 8000b52:	551a      	strb	r2, [r3, r4]
	}
	if(LL_USART_IsActiveFlag_TXE(USART2))
 8000b54:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b56:	f7ff ff23 	bl	80009a0 <LL_USART_IsActiveFlag_TXE>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01d      	beq.n	8000b9c <USART2_IRQHandler+0x9c>
	{
		//asm("NOP");
		if(uart_buf_ptr >= 128U)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <USART2_IRQHandler+0xb0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b7f      	cmp	r3, #127	; 0x7f
 8000b66:	d902      	bls.n	8000b6e <USART2_IRQHandler+0x6e>
		{
			uart_write_ptr=0;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <USART2_IRQHandler+0xb4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
		}
		if(uart_write_ptr  < uart_buf_ptr) // chưa tràn sẽ đúng
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <USART2_IRQHandler+0xb4>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <USART2_IRQHandler+0xb0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d20d      	bcs.n	8000b96 <USART2_IRQHandler+0x96>
		{
			c= uart_buffer[uart_write_ptr++];
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <USART2_IRQHandler+0xb4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <USART2_IRQHandler+0xb4>)
 8000b82:	600a      	str	r2, [r1, #0]
 8000b84:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <USART2_IRQHandler+0xb8>)
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	71fb      	strb	r3, [r7, #7]
			LL_USART_TransmitData8(USART2, c);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b90:	f7ff ff65 	bl	8000a5e <LL_USART_TransmitData8>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b94:	e002      	b.n	8000b9c <USART2_IRQHandler+0x9c>
			LL_USART_DisableIT_TXE(USART2);
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <USART2_IRQHandler+0xa4>)
 8000b98:	f7ff ff31 	bl	80009fe <LL_USART_DisableIT_TXE>
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	20000114 	.word	0x20000114
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	20000120 	.word	0x20000120
 8000bb4:	20000090 	.word	0x20000090
 8000bb8:	2000011c 	.word	0x2000011c

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f002 f8a4 	bl	8002d38 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20020000 	.word	0x20020000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	20000118 	.word	0x20000118
 8000c24:	20000138 	.word	0x20000138

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <LL_DMA_EnableStream>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <LL_DMA_EnableStream+0x3c>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <LL_DMA_EnableStream+0x3c>)
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	440a      	add	r2, r1
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	4611      	mov	r1, r2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	440a      	add	r2, r1
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	080036b4 	.word	0x080036b4

08000da0 <LL_DMA_DisableStream>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <LL_DMA_DisableStream+0x3c>)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <LL_DMA_DisableStream+0x3c>)
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	440a      	add	r2, r1
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	440a      	add	r2, r1
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	080036b4 	.word	0x080036b4

08000de0 <LL_DMA_SetDataTransferDirection>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LL_DMA_SetDataTransferDirection+0x44>)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000e00:	4908      	ldr	r1, [pc, #32]	; (8000e24 <LL_DMA_SetDataTransferDirection+0x44>)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	440b      	add	r3, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	440b      	add	r3, r1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	080036b4 	.word	0x080036b4

08000e28 <LL_DMA_SetMode>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LL_DMA_SetMode+0x44>)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000e48:	4908      	ldr	r1, [pc, #32]	; (8000e6c <LL_DMA_SetMode+0x44>)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	440b      	add	r3, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	440b      	add	r3, r1
 8000e56:	4619      	mov	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	080036b4 	.word	0x080036b4

08000e70 <LL_DMA_SetPeriphIncMode>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4413      	add	r3, r2
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e90:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	440b      	add	r3, r1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	440b      	add	r3, r1
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	080036b4 	.word	0x080036b4

08000eb8 <LL_DMA_SetMemoryIncMode>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <LL_DMA_SetMemoryIncMode+0x44>)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ed8:	4908      	ldr	r1, [pc, #32]	; (8000efc <LL_DMA_SetMemoryIncMode+0x44>)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	440b      	add	r3, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	080036b4 	.word	0x080036b4

08000f00 <LL_DMA_SetPeriphSize>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LL_DMA_SetPeriphSize+0x44>)
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000f20:	4908      	ldr	r1, [pc, #32]	; (8000f44 <LL_DMA_SetPeriphSize+0x44>)
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	440b      	add	r3, r1
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	080036b4 	.word	0x080036b4

08000f48 <LL_DMA_SetMemorySize>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LL_DMA_SetMemorySize+0x44>)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000f68:	4908      	ldr	r1, [pc, #32]	; (8000f8c <LL_DMA_SetMemorySize+0x44>)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	440b      	add	r3, r1
 8000f76:	4619      	mov	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	080036b4 	.word	0x080036b4

08000f90 <LL_DMA_SetStreamPriorityLevel>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fb0:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	080036b4 	.word	0x080036b4

08000fd8 <LL_DMA_SetDataLength>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <LL_DMA_SetDataLength+0x44>)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	4908      	ldr	r1, [pc, #32]	; (800101c <LL_DMA_SetDataLength+0x44>)
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	440a      	add	r2, r1
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4611      	mov	r1, r2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	440a      	add	r2, r1
 8001006:	4611      	mov	r1, r2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	080036b4 	.word	0x080036b4

08001020 <LL_DMA_SetChannelSelection>:
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LL_DMA_SetChannelSelection+0x44>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001040:	4908      	ldr	r1, [pc, #32]	; (8001064 <LL_DMA_SetChannelSelection+0x44>)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	440b      	add	r3, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	440b      	add	r3, r1
 800104e:	4619      	mov	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	080036b4 	.word	0x080036b4

08001068 <LL_DMA_SetMemoryBurstxfer>:
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LL_DMA_SetMemoryBurstxfer+0x44>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8001088:	4908      	ldr	r1, [pc, #32]	; (80010ac <LL_DMA_SetMemoryBurstxfer+0x44>)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	440b      	add	r3, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	440b      	add	r3, r1
 8001096:	4619      	mov	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	080036b4 	.word	0x080036b4

080010b0 <LL_DMA_SetPeriphBurstxfer>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LL_DMA_SetPeriphBurstxfer+0x44>)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 80010d0:	4908      	ldr	r1, [pc, #32]	; (80010f4 <LL_DMA_SetPeriphBurstxfer+0x44>)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	440b      	add	r3, r1
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	440b      	add	r3, r1
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	080036b4 	.word	0x080036b4

080010f8 <LL_DMA_EnableFifoMode>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001102:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <LL_DMA_EnableFifoMode+0x3c>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4413      	add	r3, r2
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <LL_DMA_EnableFifoMode+0x3c>)
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	440a      	add	r2, r1
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	4611      	mov	r1, r2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	440a      	add	r2, r1
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6153      	str	r3, [r2, #20]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	080036b4 	.word	0x080036b4

08001138 <LL_DMA_SetFIFOThreshold>:
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <LL_DMA_SetFIFOThreshold+0x44>)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f023 0203 	bic.w	r2, r3, #3
 8001158:	4908      	ldr	r1, [pc, #32]	; (800117c <LL_DMA_SetFIFOThreshold+0x44>)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	440b      	add	r3, r1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	440b      	add	r3, r1
 8001166:	4619      	mov	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	614b      	str	r3, [r1, #20]
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	080036b4 	.word	0x080036b4

08001180 <LL_DMA_SetMemoryAddress>:
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <LL_DMA_SetMemoryAddress+0x2c>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	080036b4 	.word	0x080036b4

080011b0 <LL_DMA_SetPeriphAddress>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <LL_DMA_SetPeriphAddress+0x2c>)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6093      	str	r3, [r2, #8]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	080036b4 	.word	0x080036b4

080011e0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80011ea:	4a0c      	ldr	r2, [pc, #48]	; (800121c <LL_DMA_EnableIT_TC+0x3c>)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <LL_DMA_EnableIT_TC+0x3c>)
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	440a      	add	r2, r1
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	4611      	mov	r1, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	440a      	add	r2, r1
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	080036b4 	.word	0x080036b4

08001220 <LL_USART_Enable>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60da      	str	r2, [r3, #12]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_USART_EnableDirectionRx>:
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	330c      	adds	r3, #12
 800124c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	e853 3f00 	ldrex	r3, [r3]
 8001254:	60bb      	str	r3, [r7, #8]
   return(result);
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	330c      	adds	r3, #12
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	61ba      	str	r2, [r7, #24]
 8001266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001268:	6979      	ldr	r1, [r7, #20]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	e841 2300 	strex	r3, r2, [r1]
 8001270:	613b      	str	r3, [r7, #16]
   return(result);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e7      	bne.n	8001248 <LL_USART_EnableDirectionRx+0x8>
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_USART_ConfigAsyncMode>:
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	615a      	str	r2, [r3, #20]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_USART_EnableIT_RXNE>:
{
 80012b2:	b480      	push	{r7}
 80012b4:	b089      	sub	sp, #36	; 0x24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	330c      	adds	r3, #12
 80012be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	e853 3f00 	ldrex	r3, [r3]
 80012c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	330c      	adds	r3, #12
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	61ba      	str	r2, [r7, #24]
 80012d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	e841 2300 	strex	r3, r2, [r1]
 80012e2:	613b      	str	r3, [r7, #16]
   return(result);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1e7      	bne.n	80012ba <LL_USART_EnableIT_RXNE+0x8>
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_USART_EnableDMAReq_TX>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3314      	adds	r3, #20
 8001304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	e853 3f00 	ldrex	r3, [r3]
 800130c:	60bb      	str	r3, [r7, #8]
   return(result);
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3314      	adds	r3, #20
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	61ba      	str	r2, [r7, #24]
 800131e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	e841 2300 	strex	r3, r2, [r1]
 8001328:	613b      	str	r3, [r7, #16]
   return(result);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1e7      	bne.n	8001300 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_USART_DMA_GetRegAddr>:
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3304      	adds	r3, #4
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <LL_AHB1_GRP1_EnableClock>:
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4313      	orrs	r3, r2
 800136a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800136e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40023800 	.word	0x40023800

08001388 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4313      	orrs	r3, r2
 800139a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800139e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4013      	ands	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40023800 	.word	0x40023800

080013b8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013e6:	f7ff ffcf 	bl	8001388 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff ffb4 	bl	8001358 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013f0:	230c      	movs	r3, #12
 80013f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001404:	2307      	movs	r3, #7
 8001406:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4857      	ldr	r0, [pc, #348]	; (800156c <MX_USART2_UART_Init+0x1b4>)
 800140e:	f001 f81c 	bl	800244a <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	2106      	movs	r1, #6
 8001418:	4855      	ldr	r0, [pc, #340]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 800141a:	f7ff fe01 	bl	8001020 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	2106      	movs	r1, #6
 8001422:	4853      	ldr	r0, [pc, #332]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001424:	f7ff fcdc 	bl	8000de0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_MEDIUM);
 8001428:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800142c:	2106      	movs	r1, #6
 800142e:	4850      	ldr	r0, [pc, #320]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001430:	f7ff fdae 	bl	8000f90 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001434:	2200      	movs	r2, #0
 8001436:	2106      	movs	r1, #6
 8001438:	484d      	ldr	r0, [pc, #308]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 800143a:	f7ff fcf5 	bl	8000e28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800143e:	2200      	movs	r2, #0
 8001440:	2106      	movs	r1, #6
 8001442:	484b      	ldr	r0, [pc, #300]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001444:	f7ff fd14 	bl	8000e70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800144c:	2106      	movs	r1, #6
 800144e:	4848      	ldr	r0, [pc, #288]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001450:	f7ff fd32 	bl	8000eb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8001454:	2200      	movs	r2, #0
 8001456:	2106      	movs	r1, #6
 8001458:	4845      	ldr	r0, [pc, #276]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 800145a:	f7ff fd51 	bl	8000f00 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 800145e:	2200      	movs	r2, #0
 8001460:	2106      	movs	r1, #6
 8001462:	4843      	ldr	r0, [pc, #268]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001464:	f7ff fd70 	bl	8000f48 <LL_DMA_SetMemorySize>

  LL_DMA_EnableFifoMode(DMA1, LL_DMA_STREAM_6);
 8001468:	2106      	movs	r1, #6
 800146a:	4841      	ldr	r0, [pc, #260]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 800146c:	f7ff fe44 	bl	80010f8 <LL_DMA_EnableFifoMode>

  LL_DMA_SetFIFOThreshold(DMA1, LL_DMA_STREAM_6, LL_DMA_FIFOTHRESHOLD_1_4);
 8001470:	2200      	movs	r2, #0
 8001472:	2106      	movs	r1, #6
 8001474:	483e      	ldr	r0, [pc, #248]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001476:	f7ff fe5f 	bl	8001138 <LL_DMA_SetFIFOThreshold>

  LL_DMA_SetMemoryBurstxfer(DMA1, LL_DMA_STREAM_6, LL_DMA_MBURST_SINGLE);
 800147a:	2200      	movs	r2, #0
 800147c:	2106      	movs	r1, #6
 800147e:	483c      	ldr	r0, [pc, #240]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001480:	f7ff fdf2 	bl	8001068 <LL_DMA_SetMemoryBurstxfer>

  LL_DMA_SetPeriphBurstxfer(DMA1, LL_DMA_STREAM_6, LL_DMA_PBURST_SINGLE);
 8001484:	2200      	movs	r2, #0
 8001486:	2106      	movs	r1, #6
 8001488:	4839      	ldr	r0, [pc, #228]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 800148a:	f7ff fe11 	bl	80010b0 <LL_DMA_SetPeriphBurstxfer>

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 800148e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001492:	2105      	movs	r1, #5
 8001494:	4836      	ldr	r0, [pc, #216]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001496:	f7ff fdc3 	bl	8001020 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	4834      	ldr	r0, [pc, #208]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014a0:	f7ff fc9e 	bl	8000de0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_MEDIUM);
 80014a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a8:	2105      	movs	r1, #5
 80014aa:	4831      	ldr	r0, [pc, #196]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014ac:	f7ff fd70 	bl	8000f90 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2105      	movs	r1, #5
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014b6:	f7ff fcb7 	bl	8000e28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	482c      	ldr	r0, [pc, #176]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014c0:	f7ff fcd6 	bl	8000e70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 80014c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c8:	2105      	movs	r1, #5
 80014ca:	4829      	ldr	r0, [pc, #164]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014cc:	f7ff fcf4 	bl	8000eb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2105      	movs	r1, #5
 80014d4:	4826      	ldr	r0, [pc, #152]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014d6:	f7ff fd13 	bl	8000f00 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 80014da:	2200      	movs	r2, #0
 80014dc:	2105      	movs	r1, #5
 80014de:	4824      	ldr	r0, [pc, #144]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014e0:	f7ff fd32 	bl	8000f48 <LL_DMA_SetMemorySize>

  LL_DMA_EnableFifoMode(DMA1, LL_DMA_STREAM_5);
 80014e4:	2105      	movs	r1, #5
 80014e6:	4822      	ldr	r0, [pc, #136]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014e8:	f7ff fe06 	bl	80010f8 <LL_DMA_EnableFifoMode>

  LL_DMA_SetFIFOThreshold(DMA1, LL_DMA_STREAM_5, LL_DMA_FIFOTHRESHOLD_1_4);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2105      	movs	r1, #5
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014f2:	f7ff fe21 	bl	8001138 <LL_DMA_SetFIFOThreshold>

  LL_DMA_SetMemoryBurstxfer(DMA1, LL_DMA_STREAM_5, LL_DMA_MBURST_SINGLE);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2105      	movs	r1, #5
 80014fa:	481d      	ldr	r0, [pc, #116]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 80014fc:	f7ff fdb4 	bl	8001068 <LL_DMA_SetMemoryBurstxfer>

  LL_DMA_SetPeriphBurstxfer(DMA1, LL_DMA_STREAM_5, LL_DMA_PBURST_SINGLE);
 8001500:	2200      	movs	r2, #0
 8001502:	2105      	movs	r1, #5
 8001504:	481a      	ldr	r0, [pc, #104]	; (8001570 <MX_USART2_UART_Init+0x1b8>)
 8001506:	f7ff fdd3 	bl	80010b0 <LL_DMA_SetPeriphBurstxfer>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800150a:	f7ff fb9f 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 800150e:	4603      	mov	r3, r0
 8001510:	2200      	movs	r2, #0
 8001512:	2105      	movs	r1, #5
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fbef 	bl	8000cf8 <NVIC_EncodePriority>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	2026      	movs	r0, #38	; 0x26
 8001520:	f7ff fbc0 	bl	8000ca4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001524:	2026      	movs	r0, #38	; 0x26
 8001526:	f7ff fb9f 	bl	8000c68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800152a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800152e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800153c:	230c      	movs	r3, #12
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8001544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <MX_USART2_UART_Init+0x1bc>)
 8001552:	f001 fb8d 	bl	8002c70 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_USART2_UART_Init+0x1bc>)
 8001558:	f7ff fe95 	bl	8001286 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART2_UART_Init+0x1bc>)
 800155e:	f7ff fe5f 	bl	8001220 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3738      	adds	r7, #56	; 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020000 	.word	0x40020000
 8001570:	40026000 	.word	0x40026000
 8001574:	40004400 	.word	0x40004400

08001578 <UART_Config>:
//#if UART_CONFIG_USE_INTERRUPT ==1
//
//#endif // UART_CONFIG_USE_INTERRUPT

void UART_Config(void)//Receiver
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	/************************RX CONFIG********************************** */
	//1. Enable the USART by writing the UE bit in USART_CR1 register to 1
	LL_USART_Enable(USART2);
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <UART_Config+0x1c>)
 800157e:	f7ff fe4f 	bl	8001220 <LL_USART_Enable>
	//2.define word lenght- Already in tools
	//3  stop-bit                  -Already in tools
	//4. DMA -tạm thời chưa cấu hình
	//5.Baudrate -ALready in tools
	//6.Set bit RE(Receive enable)
	LL_USART_EnableDirectionRx(USART2);
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <UART_Config+0x1c>)
 8001584:	f7ff fe5c 	bl	8001240 <LL_USART_EnableDirectionRx>

	//#if UART_CONFIG_USE_INTERRUPT
		LL_USART_EnableIT_RXNE(USART2);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <UART_Config+0x1c>)
 800158a:	f7ff fe92 	bl	80012b2 <LL_USART_EnableIT_RXNE>
		//Write data to DR REG

		//Wait TC =1


}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40004400 	.word	0x40004400

08001598 <UART_Send_String>:
#endif // UART_CONFIG_USE_INTERRUPT
}

#else
void UART_Send_String(const char * str, uint32_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	memcpy(uart_buffer, str, len);
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <UART_Send_String+0x24>)
 80015a8:	f001 fbf0 	bl	8002d8c <memcpy>

	USART_Configure_DMA_Transaction(uart_buffer,len);
 80015ac:	6839      	ldr	r1, [r7, #0]
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <UART_Send_String+0x24>)
 80015b0:	f000 f806 	bl	80015c0 <USART_Configure_DMA_Transaction>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000011c 	.word	0x2000011c

080015c0 <USART_Configure_DMA_Transaction>:



//DMA produce stream
void USART_Configure_DMA_Transaction(const uint8_t * user_buf, uint32_t buf_len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	//Disable DMA stream
	LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 80015ca:	2106      	movs	r1, #6
 80015cc:	4815      	ldr	r0, [pc, #84]	; (8001624 <USART_Configure_DMA_Transaction+0x64>)
 80015ce:	f7ff fbe7 	bl	8000da0 <LL_DMA_DisableStream>

	//Configure memory address (RAM)
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)user_buf);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	461a      	mov	r2, r3
 80015d6:	2106      	movs	r1, #6
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <USART_Configure_DMA_Transaction+0x64>)
 80015da:	f7ff fdd1 	bl	8001180 <LL_DMA_SetMemoryAddress>
	//Confige peria port address. ADC Data
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_6, LL_USART_DMA_GetRegAddr(USART2));
 80015de:	4812      	ldr	r0, [pc, #72]	; (8001628 <USART_Configure_DMA_Transaction+0x68>)
 80015e0:	f7ff fead 	bl	800133e <LL_USART_DMA_GetRegAddr>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	2106      	movs	r1, #6
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <USART_Configure_DMA_Transaction+0x64>)
 80015ec:	f7ff fde0 	bl	80011b0 <LL_DMA_SetPeriphAddress>



	//configure number of data items copy
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, buf_len);
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	2106      	movs	r1, #6
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <USART_Configure_DMA_Transaction+0x64>)
 80015f6:	f7ff fcef 	bl	8000fd8 <LL_DMA_SetDataLength>
	//đi�?u chỉnh tốc độ giữa tuy�?n và nhận....

	//Configure direction - already

	//Configure each tranfer how much
	LL_DMA_SetMemoryBurstxfer(DMA1, LL_DMA_STREAM_6, LL_DMA_MBURST_SINGLE);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2106      	movs	r1, #6
 80015fe:	4809      	ldr	r0, [pc, #36]	; (8001624 <USART_Configure_DMA_Transaction+0x64>)
 8001600:	f7ff fd32 	bl	8001068 <LL_DMA_SetMemoryBurstxfer>

 LL_USART_EnableDMAReq_TX(USART2);
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <USART_Configure_DMA_Transaction+0x68>)
 8001606:	f7ff fe77 	bl	80012f8 <LL_USART_EnableDMAReq_TX>
	//turn on IT
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 800160a:	2106      	movs	r1, #6
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <USART_Configure_DMA_Transaction+0x64>)
 800160e:	f7ff fde7 	bl	80011e0 <LL_DMA_EnableIT_TC>
	//Enable DMA stream
	LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 8001612:	2106      	movs	r1, #6
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <USART_Configure_DMA_Transaction+0x64>)
 8001616:	f7ff fba3 	bl	8000d60 <LL_DMA_EnableStream>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40026000 	.word	0x40026000
 8001628:	40004400 	.word	0x40004400

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001656:	f7ff fae7 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f001 fb73 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff f88b 	bl	8000778 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001670:	08003700 	.word	0x08003700
  ldr r2, =_sbss
 8001674:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001678:	20000138 	.word	0x20000138

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f931 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff f904 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f93b 	bl	800195e <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f911 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	20000008 	.word	0x20000008
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008
 8001748:	20000124 	.word	0x20000124

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000124 	.word	0x20000124

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008

080017ac <__NVIC_SetPriorityGrouping>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_SetPriority>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff47 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff5c 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffb0 	bl	80018cc <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e267      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d075      	beq.n	8001a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001996:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d00c      	beq.n	80019bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b85      	ldr	r3, [pc, #532]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d112      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b82      	ldr	r3, [pc, #520]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ba:	d10b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4b7e      	ldr	r3, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05b      	beq.n	8001a80 <HAL_RCC_OscConfig+0x108>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d157      	bne.n	8001a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e242      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x74>
 80019de:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a75      	ldr	r2, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01d      	b.n	8001a28 <HAL_RCC_OscConfig+0xb0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x98>
 80019f6:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6f      	ldr	r2, [pc, #444]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6c      	ldr	r2, [pc, #432]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xb0>
 8001a10:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a68      	ldr	r2, [pc, #416]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fe8c 	bl	800174c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fe88 	bl	800174c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e207      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0xc0>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fe78 	bl	800174c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fe74 	bl	800174c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1f3      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0xe8>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d063      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d11c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa6:	4b44      	ldr	r3, [pc, #272]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d116      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x152>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1c7      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4937      	ldr	r1, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	e03a      	b.n	8001b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_OscConfig+0x244>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fe2d 	bl	800174c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff fe29 	bl	800174c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1a8      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4925      	ldr	r1, [pc, #148]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x244>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fe0c 	bl	800174c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff fe08 	bl	800174c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e187      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d036      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d016      	beq.n	8001b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_RCC_OscConfig+0x248>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff fdec 	bl	800174c <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff fde8 	bl	800174c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e167      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x200>
 8001b96:	e01b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_OscConfig+0x248>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fdd5 	bl	800174c <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	e00e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fdd1 	bl	800174c <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d907      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e150      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470000 	.word	0x42470000
 8001bc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	4b88      	ldr	r3, [pc, #544]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ea      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8097 	beq.w	8001d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be2:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a7c      	ldr	r2, [pc, #496]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b7a      	ldr	r3, [pc, #488]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b77      	ldr	r3, [pc, #476]	; (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b74      	ldr	r3, [pc, #464]	; (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a73      	ldr	r2, [pc, #460]	; (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fd91 	bl	800174c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff fd8d 	bl	800174c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e10c      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x474>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2ea>
 8001c54:	4b64      	ldr	r3, [pc, #400]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a63      	ldr	r2, [pc, #396]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x324>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x30c>
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a5e      	ldr	r2, [pc, #376]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	4b5c      	ldr	r3, [pc, #368]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	4a5b      	ldr	r2, [pc, #364]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6713      	str	r3, [r2, #112]	; 0x70
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0x324>
 8001c84:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a57      	ldr	r2, [pc, #348]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	4b55      	ldr	r3, [pc, #340]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f023 0304 	bic.w	r3, r3, #4
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d015      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fd52 	bl	800174c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff fd4e 	bl	800174c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0cb      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0ee      	beq.n	8001cac <HAL_RCC_OscConfig+0x334>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fd3c 	bl	800174c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fd38 	bl	800174c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0b5      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ee      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a38      	ldr	r2, [pc, #224]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80a1 	beq.w	8001e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d05c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d141      	bne.n	8001dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_OscConfig+0x478>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff fd0c 	bl	800174c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff fd08 	bl	800174c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e087      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	491b      	ldr	r1, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x478>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fce1 	bl	800174c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff fcdd 	bl	800174c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e05c      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x416>
 8001dac:	e054      	b.n	8001e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCC_OscConfig+0x478>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fcca 	bl	800174c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff fcc6 	bl	800174c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e045      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x444>
 8001dda:	e03d      	b.n	8001e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e038      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000
 8001df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4ec>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d028      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d121      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0cc      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d90c      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	494d      	ldr	r1, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d044      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d119      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e067      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4934      	ldr	r1, [pc, #208]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f58:	f7ff fbf8 	bl	800174c <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff fbf4 	bl	800174c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e04f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d20c      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f821 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	490a      	ldr	r1, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	5ccb      	ldrb	r3, [r1, r3]
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb58 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00
 8002024:	40023800 	.word	0x40023800
 8002028:	0800369c 	.word	0x0800369c
 800202c:	20000000 	.word	0x20000000
 8002030:	20000004 	.word	0x20000004

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002038:	b094      	sub	sp, #80	; 0x50
 800203a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	647b      	str	r3, [r7, #68]	; 0x44
 8002040:	2300      	movs	r3, #0
 8002042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002044:	2300      	movs	r3, #0
 8002046:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800204c:	4b79      	ldr	r3, [pc, #484]	; (8002234 <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b08      	cmp	r3, #8
 8002056:	d00d      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x40>
 8002058:	2b08      	cmp	r3, #8
 800205a:	f200 80e1 	bhi.w	8002220 <HAL_RCC_GetSysClockFreq+0x1ec>
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x34>
 8002062:	2b04      	cmp	r3, #4
 8002064:	d003      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x3a>
 8002066:	e0db      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b73      	ldr	r3, [pc, #460]	; (8002238 <HAL_RCC_GetSysClockFreq+0x204>)
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800206c:	e0db      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800206e:	4b73      	ldr	r3, [pc, #460]	; (800223c <HAL_RCC_GetSysClockFreq+0x208>)
 8002070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002072:	e0d8      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002074:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_GetSysClockFreq+0x200>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800207c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800207e:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <HAL_RCC_GetSysClockFreq+0x200>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208a:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_GetSysClockFreq+0x200>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	2200      	movs	r2, #0
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
 8002094:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
 80020a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020a6:	4622      	mov	r2, r4
 80020a8:	462b      	mov	r3, r5
 80020aa:	f04f 0000 	mov.w	r0, #0
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	0159      	lsls	r1, r3, #5
 80020b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b8:	0150      	lsls	r0, r2, #5
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4621      	mov	r1, r4
 80020c0:	1a51      	subs	r1, r2, r1
 80020c2:	6139      	str	r1, [r7, #16]
 80020c4:	4629      	mov	r1, r5
 80020c6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020d8:	4659      	mov	r1, fp
 80020da:	018b      	lsls	r3, r1, #6
 80020dc:	4651      	mov	r1, sl
 80020de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020e2:	4651      	mov	r1, sl
 80020e4:	018a      	lsls	r2, r1, #6
 80020e6:	4651      	mov	r1, sl
 80020e8:	ebb2 0801 	subs.w	r8, r2, r1
 80020ec:	4659      	mov	r1, fp
 80020ee:	eb63 0901 	sbc.w	r9, r3, r1
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002106:	4690      	mov	r8, r2
 8002108:	4699      	mov	r9, r3
 800210a:	4623      	mov	r3, r4
 800210c:	eb18 0303 	adds.w	r3, r8, r3
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	462b      	mov	r3, r5
 8002114:	eb49 0303 	adc.w	r3, r9, r3
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002126:	4629      	mov	r1, r5
 8002128:	024b      	lsls	r3, r1, #9
 800212a:	4621      	mov	r1, r4
 800212c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002130:	4621      	mov	r1, r4
 8002132:	024a      	lsls	r2, r1, #9
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213a:	2200      	movs	r2, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
 800213e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002144:	f7fe f8a4 	bl	8000290 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4613      	mov	r3, r2
 800214e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002150:	e058      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_RCC_GetSysClockFreq+0x200>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	2200      	movs	r2, #0
 800215a:	4618      	mov	r0, r3
 800215c:	4611      	mov	r1, r2
 800215e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
 8002168:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800216c:	4642      	mov	r2, r8
 800216e:	464b      	mov	r3, r9
 8002170:	f04f 0000 	mov.w	r0, #0
 8002174:	f04f 0100 	mov.w	r1, #0
 8002178:	0159      	lsls	r1, r3, #5
 800217a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217e:	0150      	lsls	r0, r2, #5
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4641      	mov	r1, r8
 8002186:	ebb2 0a01 	subs.w	sl, r2, r1
 800218a:	4649      	mov	r1, r9
 800218c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800219c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021a4:	ebb2 040a 	subs.w	r4, r2, sl
 80021a8:	eb63 050b 	sbc.w	r5, r3, fp
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	00eb      	lsls	r3, r5, #3
 80021b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ba:	00e2      	lsls	r2, r4, #3
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	18e3      	adds	r3, r4, r3
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	464b      	mov	r3, r9
 80021c8:	eb45 0303 	adc.w	r3, r5, r3
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021da:	4629      	mov	r1, r5
 80021dc:	028b      	lsls	r3, r1, #10
 80021de:	4621      	mov	r1, r4
 80021e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021e4:	4621      	mov	r1, r4
 80021e6:	028a      	lsls	r2, r1, #10
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ee:	2200      	movs	r2, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	61fa      	str	r2, [r7, #28]
 80021f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f8:	f7fe f84a 	bl	8000290 <__aeabi_uldivmod>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4613      	mov	r3, r2
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0x200>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800221e:	e002      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetSysClockFreq+0x204>)
 8002222:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002228:	4618      	mov	r0, r3
 800222a:	3750      	adds	r7, #80	; 0x50
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	613b      	str	r3, [r7, #16]
  return result;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2103      	movs	r1, #3
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	61bb      	str	r3, [r7, #24]
  return result;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	401a      	ands	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	431a      	orrs	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b089      	sub	sp, #36	; 0x24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	613b      	str	r3, [r7, #16]
  return result;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2103      	movs	r1, #3
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	401a      	ands	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	61bb      	str	r3, [r7, #24]
  return result;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002320:	bf00      	nop
 8002322:	3724      	adds	r7, #36	; 0x24
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	613b      	str	r3, [r7, #16]
  return result;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2103      	movs	r1, #3
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	61bb      	str	r3, [r7, #24]
  return result;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	60da      	str	r2, [r3, #12]
}
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800238a:	b480      	push	{r7}
 800238c:	b089      	sub	sp, #36	; 0x24
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	613b      	str	r3, [r7, #16]
  return result;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	210f      	movs	r1, #15
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	401a      	ands	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	61bb      	str	r3, [r7, #24]
  return result;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80023dc:	bf00      	nop
 80023de:	3724      	adds	r7, #36	; 0x24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	613b      	str	r3, [r7, #16]
  return result;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	210f      	movs	r1, #15
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	61bb      	str	r3, [r7, #24]
  return result;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b088      	sub	sp, #32
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	613b      	str	r3, [r7, #16]
  return result;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002474:	e050      	b.n	8002518 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d042      	beq.n	8002512 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d003      	beq.n	800249c <LL_GPIO_Init+0x52>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d10d      	bne.n	80024b8 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	461a      	mov	r2, r3
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff12 	bl	80022ce <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	461a      	mov	r2, r3
 80024b0:	69b9      	ldr	r1, [r7, #24]
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fef3 	bl	800229e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	461a      	mov	r2, r3
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff33 	bl	800232c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d11a      	bne.n	8002504 <LL_GPIO_Init+0xba>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	60bb      	str	r3, [r7, #8]
  return result;
 80024da:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b07      	cmp	r3, #7
 80024e4:	d807      	bhi.n	80024f6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	461a      	mov	r2, r3
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff4b 	bl	800238a <LL_GPIO_SetAFPin_0_7>
 80024f4:	e006      	b.n	8002504 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	461a      	mov	r2, r3
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff72 	bl	80023e8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	461a      	mov	r2, r3
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fe97 	bl	8002240 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1a7      	bne.n	8002476 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <LL_RCC_GetSysClkSource+0x18>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <LL_RCC_GetAHBPrescaler+0x18>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800

08002568 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <LL_RCC_GetAPB1Prescaler+0x18>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800

08002584 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <LL_RCC_GetAPB2Prescaler+0x18>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <LL_RCC_PLL_GetMainSource+0x18>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <LL_RCC_PLL_GetN+0x18>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40023800 	.word	0x40023800

080025d8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <LL_RCC_PLL_GetP+0x18>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <LL_RCC_PLL_GetDivider+0x18>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002618:	f000 f820 	bl	800265c <RCC_GetSystemClockFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f840 	bl	80026ac <RCC_GetHCLKClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f84e 	bl	80026d8 <RCC_GetPCLK1ClockFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f85a 	bl	8002700 <RCC_GetPCLK2ClockFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60da      	str	r2, [r3, #12]
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002666:	f7ff ff63 	bl	8002530 <LL_RCC_GetSysClkSource>
 800266a:	4603      	mov	r3, r0
 800266c:	2b08      	cmp	r3, #8
 800266e:	d00c      	beq.n	800268a <RCC_GetSystemClockFreq+0x2e>
 8002670:	2b08      	cmp	r3, #8
 8002672:	d80f      	bhi.n	8002694 <RCC_GetSystemClockFreq+0x38>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <RCC_GetSystemClockFreq+0x22>
 8002678:	2b04      	cmp	r3, #4
 800267a:	d003      	beq.n	8002684 <RCC_GetSystemClockFreq+0x28>
 800267c:	e00a      	b.n	8002694 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <RCC_GetSystemClockFreq+0x48>)
 8002680:	607b      	str	r3, [r7, #4]
      break;
 8002682:	e00a      	b.n	800269a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <RCC_GetSystemClockFreq+0x4c>)
 8002686:	607b      	str	r3, [r7, #4]
      break;
 8002688:	e007      	b.n	800269a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800268a:	2008      	movs	r0, #8
 800268c:	f000 f84c 	bl	8002728 <RCC_PLL_GetFreqDomain_SYS>
 8002690:	6078      	str	r0, [r7, #4]
      break;
 8002692:	e002      	b.n	800269a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <RCC_GetSystemClockFreq+0x48>)
 8002696:	607b      	str	r3, [r7, #4]
      break;
 8002698:	bf00      	nop
  }

  return frequency;
 800269a:	687b      	ldr	r3, [r7, #4]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	007a1200 	.word	0x007a1200

080026ac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80026b4:	f7ff ff4a 	bl	800254c <LL_RCC_GetAHBPrescaler>
 80026b8:	4603      	mov	r3, r0
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <RCC_GetHCLKClockFreq+0x28>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	40d3      	lsrs	r3, r2
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	0800369c 	.word	0x0800369c

080026d8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80026e0:	f7ff ff42 	bl	8002568 <LL_RCC_GetAPB1Prescaler>
 80026e4:	4603      	mov	r3, r0
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <RCC_GetPCLK1ClockFreq+0x24>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	461a      	mov	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	40d3      	lsrs	r3, r2
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	080036ac 	.word	0x080036ac

08002700 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002708:	f7ff ff3c 	bl	8002584 <LL_RCC_GetAPB2Prescaler>
 800270c:	4603      	mov	r3, r0
 800270e:	0b5b      	lsrs	r3, r3, #13
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <RCC_GetPCLK2ClockFreq+0x24>)
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	40d3      	lsrs	r3, r2
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	080036ac 	.word	0x080036ac

08002728 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800273c:	f7ff ff30 	bl	80025a0 <LL_RCC_PLL_GetMainSource>
 8002740:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800274e:	d003      	beq.n	8002758 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002750:	e005      	b.n	800275e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002754:	617b      	str	r3, [r7, #20]
      break;
 8002756:	e005      	b.n	8002764 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800275a:	617b      	str	r3, [r7, #20]
      break;
 800275c:	e002      	b.n	8002764 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002760:	617b      	str	r3, [r7, #20]
      break;
 8002762:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b08      	cmp	r3, #8
 8002768:	d113      	bne.n	8002792 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800276a:	f7ff ff43 	bl	80025f4 <LL_RCC_PLL_GetDivider>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fbb3 f4f2 	udiv	r4, r3, r2
 8002776:	f7ff ff21 	bl	80025bc <LL_RCC_PLL_GetN>
 800277a:	4603      	mov	r3, r0
 800277c:	fb03 f404 	mul.w	r4, r3, r4
 8002780:	f7ff ff2a 	bl	80025d8 <LL_RCC_PLL_GetP>
 8002784:	4603      	mov	r3, r0
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	3301      	adds	r3, #1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002790:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002792:	693b      	ldr	r3, [r7, #16]
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	007a1200 	.word	0x007a1200

080027a4 <LL_USART_IsEnabled>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_USART_SetStopBitsLength>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_USART_SetHWFlowCtrl>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	615a      	str	r2, [r3, #20]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_USART_SetBaudRate>:
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b0c0      	sub	sp, #256	; 0x100
 800281e:	af00      	add	r7, sp, #0
 8002820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002824:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002828:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800282c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002838:	f040 810c 	bne.w	8002a54 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800283c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002840:	2200      	movs	r2, #0
 8002842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800284a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	1891      	adds	r1, r2, r2
 8002854:	6639      	str	r1, [r7, #96]	; 0x60
 8002856:	415b      	adcs	r3, r3
 8002858:	667b      	str	r3, [r7, #100]	; 0x64
 800285a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800285e:	4621      	mov	r1, r4
 8002860:	eb12 0801 	adds.w	r8, r2, r1
 8002864:	4629      	mov	r1, r5
 8002866:	eb43 0901 	adc.w	r9, r3, r1
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800287a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	4623      	mov	r3, r4
 8002884:	eb18 0303 	adds.w	r3, r8, r3
 8002888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800288c:	462b      	mov	r3, r5
 800288e:	eb49 0303 	adc.w	r3, r9, r3
 8002892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800289a:	2200      	movs	r2, #0
 800289c:	469a      	mov	sl, r3
 800289e:	4693      	mov	fp, r2
 80028a0:	eb1a 030a 	adds.w	r3, sl, sl
 80028a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028a6:	eb4b 030b 	adc.w	r3, fp, fp
 80028aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028b4:	f7fd fcec 	bl	8000290 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <LL_USART_SetBaudRate+0x238>)
 80028be:	fba3 2302 	umull	r2, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	b29c      	uxth	r4, r3
 80028ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028d4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028d8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80028dc:	4642      	mov	r2, r8
 80028de:	464b      	mov	r3, r9
 80028e0:	1891      	adds	r1, r2, r2
 80028e2:	6539      	str	r1, [r7, #80]	; 0x50
 80028e4:	415b      	adcs	r3, r3
 80028e6:	657b      	str	r3, [r7, #84]	; 0x54
 80028e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028ec:	4641      	mov	r1, r8
 80028ee:	1851      	adds	r1, r2, r1
 80028f0:	64b9      	str	r1, [r7, #72]	; 0x48
 80028f2:	4649      	mov	r1, r9
 80028f4:	414b      	adcs	r3, r1
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8002904:	4659      	mov	r1, fp
 8002906:	00cb      	lsls	r3, r1, #3
 8002908:	4651      	mov	r1, sl
 800290a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290e:	4651      	mov	r1, sl
 8002910:	00ca      	lsls	r2, r1, #3
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	4603      	mov	r3, r0
 8002918:	4642      	mov	r2, r8
 800291a:	189b      	adds	r3, r3, r2
 800291c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002920:	464b      	mov	r3, r9
 8002922:	460a      	mov	r2, r1
 8002924:	eb42 0303 	adc.w	r3, r2, r3
 8002928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800292c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002930:	2200      	movs	r2, #0
 8002932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002936:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800293a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800293e:	460b      	mov	r3, r1
 8002940:	18db      	adds	r3, r3, r3
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
 8002944:	4613      	mov	r3, r2
 8002946:	eb42 0303 	adc.w	r3, r2, r3
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
 800294c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002950:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002954:	f7fd fc9c 	bl	8000290 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4611      	mov	r1, r2
 800295e:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <LL_USART_SetBaudRate+0x238>)
 8002960:	fba3 2301 	umull	r2, r3, r3, r1
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	2264      	movs	r2, #100	; 0x64
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	1acb      	subs	r3, r1, r3
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <LL_USART_SetBaudRate+0x238>)
 8002976:	fba3 2302 	umull	r2, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	b29b      	uxth	r3, r3
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	b29b      	uxth	r3, r3
 8002982:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002986:	b29b      	uxth	r3, r3
 8002988:	4423      	add	r3, r4
 800298a:	b29c      	uxth	r4, r3
 800298c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002990:	2200      	movs	r2, #0
 8002992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002996:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800299a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800299e:	4642      	mov	r2, r8
 80029a0:	464b      	mov	r3, r9
 80029a2:	1891      	adds	r1, r2, r2
 80029a4:	63b9      	str	r1, [r7, #56]	; 0x38
 80029a6:	415b      	adcs	r3, r3
 80029a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029ae:	4641      	mov	r1, r8
 80029b0:	1851      	adds	r1, r2, r1
 80029b2:	6339      	str	r1, [r7, #48]	; 0x30
 80029b4:	4649      	mov	r1, r9
 80029b6:	414b      	adcs	r3, r1
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029c6:	4659      	mov	r1, fp
 80029c8:	00cb      	lsls	r3, r1, #3
 80029ca:	4651      	mov	r1, sl
 80029cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d0:	4651      	mov	r1, sl
 80029d2:	00ca      	lsls	r2, r1, #3
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	4603      	mov	r3, r0
 80029da:	4642      	mov	r2, r8
 80029dc:	189b      	adds	r3, r3, r2
 80029de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029e2:	464b      	mov	r3, r9
 80029e4:	460a      	mov	r2, r1
 80029e6:	eb42 0303 	adc.w	r3, r2, r3
 80029ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80029ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029f8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80029fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002a00:	460b      	mov	r3, r1
 8002a02:	18db      	adds	r3, r3, r3
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a06:	4613      	mov	r3, r2
 8002a08:	eb42 0303 	adc.w	r3, r2, r3
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a12:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002a16:	f7fd fc3b 	bl	8000290 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <LL_USART_SetBaudRate+0x238>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	2164      	movs	r1, #100	; 0x64
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	3332      	adds	r3, #50	; 0x32
 8002a32:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <LL_USART_SetBaudRate+0x238>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4423      	add	r3, r4
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a4c:	609a      	str	r2, [r3, #8]
}
 8002a4e:	e107      	b.n	8002c60 <LL_USART_SetBaudRate+0x448>
 8002a50:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a5e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a62:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002a66:	4642      	mov	r2, r8
 8002a68:	464b      	mov	r3, r9
 8002a6a:	1891      	adds	r1, r2, r2
 8002a6c:	6239      	str	r1, [r7, #32]
 8002a6e:	415b      	adcs	r3, r3
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a76:	4641      	mov	r1, r8
 8002a78:	1854      	adds	r4, r2, r1
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	eb43 0501 	adc.w	r5, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	00eb      	lsls	r3, r5, #3
 8002a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8e:	00e2      	lsls	r2, r4, #3
 8002a90:	4614      	mov	r4, r2
 8002a92:	461d      	mov	r5, r3
 8002a94:	4643      	mov	r3, r8
 8002a96:	18e3      	adds	r3, r4, r3
 8002a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a9c:	464b      	mov	r3, r9
 8002a9e:	eb45 0303 	adc.w	r3, r5, r3
 8002aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002aa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ab0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	008b      	lsls	r3, r1, #2
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aca:	4621      	mov	r1, r4
 8002acc:	008a      	lsls	r2, r1, #2
 8002ace:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002ad2:	f7fd fbdd 	bl	8000290 <__aeabi_uldivmod>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <LL_USART_SetBaudRate+0x454>)
 8002adc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	b29c      	uxth	r4, r3
 8002ae8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002af6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002afa:	4642      	mov	r2, r8
 8002afc:	464b      	mov	r3, r9
 8002afe:	1891      	adds	r1, r2, r2
 8002b00:	61b9      	str	r1, [r7, #24]
 8002b02:	415b      	adcs	r3, r3
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b0a:	4641      	mov	r1, r8
 8002b0c:	1851      	adds	r1, r2, r1
 8002b0e:	6139      	str	r1, [r7, #16]
 8002b10:	4649      	mov	r1, r9
 8002b12:	414b      	adcs	r3, r1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b22:	4659      	mov	r1, fp
 8002b24:	00cb      	lsls	r3, r1, #3
 8002b26:	4651      	mov	r1, sl
 8002b28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	00ca      	lsls	r2, r1, #3
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	4603      	mov	r3, r0
 8002b36:	4642      	mov	r2, r8
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b3e:	464b      	mov	r3, r9
 8002b40:	460a      	mov	r2, r1
 8002b42:	eb42 0303 	adc.w	r3, r2, r3
 8002b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002b64:	4649      	mov	r1, r9
 8002b66:	008b      	lsls	r3, r1, #2
 8002b68:	4641      	mov	r1, r8
 8002b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b6e:	4641      	mov	r1, r8
 8002b70:	008a      	lsls	r2, r1, #2
 8002b72:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002b76:	f7fd fb8b 	bl	8000290 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <LL_USART_SetBaudRate+0x454>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	4a36      	ldr	r2, [pc, #216]	; (8002c6c <LL_USART_SetBaudRate+0x454>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4423      	add	r3, r4
 8002ba4:	b29c      	uxth	r4, r3
 8002ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002baa:	2200      	movs	r2, #0
 8002bac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	673b      	str	r3, [r7, #112]	; 0x70
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	eb42 0303 	adc.w	r3, r2, r3
 8002bfe:	677b      	str	r3, [r7, #116]	; 0x74
 8002c00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c04:	2200      	movs	r2, #0
 8002c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002c16:	4649      	mov	r1, r9
 8002c18:	008b      	lsls	r3, r1, #2
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c20:	4641      	mov	r1, r8
 8002c22:	008a      	lsls	r2, r1, #2
 8002c24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c28:	f7fd fb32 	bl	8000290 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <LL_USART_SetBaudRate+0x454>)
 8002c32:	fba3 1302 	umull	r1, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2164      	movs	r1, #100	; 0x64
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	3332      	adds	r3, #50	; 0x32
 8002c44:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <LL_USART_SetBaudRate+0x454>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4423      	add	r3, r4
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c5e:	609a      	str	r2, [r3, #8]
}
 8002c60:	bf00      	nop
 8002c62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c66:	46bd      	mov	sp, r7
 8002c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c6c:	51eb851f 	.word	0x51eb851f

08002c70 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fd8e 	bl	80027a4 <LL_USART_IsEnabled>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d149      	bne.n	8002d22 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c96:	f023 030c 	bic.w	r3, r3, #12
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	6851      	ldr	r1, [r2, #4]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	68d2      	ldr	r2, [r2, #12]
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	6912      	ldr	r2, [r2, #16]
 8002ca8:	4311      	orrs	r1, r2
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6992      	ldr	r2, [r2, #24]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fd85 	bl	80027cc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fd92 	bl	80027f2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fc9c 	bl	8002610 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <LL_USART_Init+0xbc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d102      	bne.n	8002ce6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	e00c      	b.n	8002d00 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <LL_USART_Init+0xc0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d102      	bne.n	8002cf4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e005      	b.n	8002d00 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <LL_USART_Init+0xc4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fd7b 	bl	8002818 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40011000 	.word	0x40011000
 8002d30:	40004400 	.word	0x40004400
 8002d34:	40011400 	.word	0x40011400

08002d38 <__errno>:
 8002d38:	4b01      	ldr	r3, [pc, #4]	; (8002d40 <__errno+0x8>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	2000000c 	.word	0x2000000c

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	4d0d      	ldr	r5, [pc, #52]	; (8002d7c <__libc_init_array+0x38>)
 8002d48:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4a:	1b64      	subs	r4, r4, r5
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	2600      	movs	r6, #0
 8002d50:	42a6      	cmp	r6, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	4d0b      	ldr	r5, [pc, #44]	; (8002d84 <__libc_init_array+0x40>)
 8002d56:	4c0c      	ldr	r4, [pc, #48]	; (8002d88 <__libc_init_array+0x44>)
 8002d58:	f000 fc8e 	bl	8003678 <_init>
 8002d5c:	1b64      	subs	r4, r4, r5
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	2600      	movs	r6, #0
 8002d62:	42a6      	cmp	r6, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6c:	4798      	blx	r3
 8002d6e:	3601      	adds	r6, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d76:	4798      	blx	r3
 8002d78:	3601      	adds	r6, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	080036f8 	.word	0x080036f8
 8002d80:	080036f8 	.word	0x080036f8
 8002d84:	080036f8 	.word	0x080036f8
 8002d88:	080036fc 	.word	0x080036fc

08002d8c <memcpy>:
 8002d8c:	440a      	add	r2, r1
 8002d8e:	4291      	cmp	r1, r2
 8002d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d94:	d100      	bne.n	8002d98 <memcpy+0xc>
 8002d96:	4770      	bx	lr
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002da2:	4291      	cmp	r1, r2
 8002da4:	d1f9      	bne.n	8002d9a <memcpy+0xe>
 8002da6:	bd10      	pop	{r4, pc}

08002da8 <memset>:
 8002da8:	4402      	add	r2, r0
 8002daa:	4603      	mov	r3, r0
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d100      	bne.n	8002db2 <memset+0xa>
 8002db0:	4770      	bx	lr
 8002db2:	f803 1b01 	strb.w	r1, [r3], #1
 8002db6:	e7f9      	b.n	8002dac <memset+0x4>

08002db8 <siprintf>:
 8002db8:	b40e      	push	{r1, r2, r3}
 8002dba:	b500      	push	{lr}
 8002dbc:	b09c      	sub	sp, #112	; 0x70
 8002dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8002dc0:	9002      	str	r0, [sp, #8]
 8002dc2:	9006      	str	r0, [sp, #24]
 8002dc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <siprintf+0x38>)
 8002dca:	9107      	str	r1, [sp, #28]
 8002dcc:	9104      	str	r1, [sp, #16]
 8002dce:	4909      	ldr	r1, [pc, #36]	; (8002df4 <siprintf+0x3c>)
 8002dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dd4:	9105      	str	r1, [sp, #20]
 8002dd6:	6800      	ldr	r0, [r0, #0]
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	a902      	add	r1, sp, #8
 8002ddc:	f000 f868 	bl	8002eb0 <_svfiprintf_r>
 8002de0:	9b02      	ldr	r3, [sp, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	b01c      	add	sp, #112	; 0x70
 8002de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dec:	b003      	add	sp, #12
 8002dee:	4770      	bx	lr
 8002df0:	2000000c 	.word	0x2000000c
 8002df4:	ffff0208 	.word	0xffff0208

08002df8 <__ssputs_r>:
 8002df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dfc:	688e      	ldr	r6, [r1, #8]
 8002dfe:	429e      	cmp	r6, r3
 8002e00:	4682      	mov	sl, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	4690      	mov	r8, r2
 8002e06:	461f      	mov	r7, r3
 8002e08:	d838      	bhi.n	8002e7c <__ssputs_r+0x84>
 8002e0a:	898a      	ldrh	r2, [r1, #12]
 8002e0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e10:	d032      	beq.n	8002e78 <__ssputs_r+0x80>
 8002e12:	6825      	ldr	r5, [r4, #0]
 8002e14:	6909      	ldr	r1, [r1, #16]
 8002e16:	eba5 0901 	sub.w	r9, r5, r1
 8002e1a:	6965      	ldr	r5, [r4, #20]
 8002e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e24:	3301      	adds	r3, #1
 8002e26:	444b      	add	r3, r9
 8002e28:	106d      	asrs	r5, r5, #1
 8002e2a:	429d      	cmp	r5, r3
 8002e2c:	bf38      	it	cc
 8002e2e:	461d      	movcc	r5, r3
 8002e30:	0553      	lsls	r3, r2, #21
 8002e32:	d531      	bpl.n	8002e98 <__ssputs_r+0xa0>
 8002e34:	4629      	mov	r1, r5
 8002e36:	f000 fb55 	bl	80034e4 <_malloc_r>
 8002e3a:	4606      	mov	r6, r0
 8002e3c:	b950      	cbnz	r0, 8002e54 <__ssputs_r+0x5c>
 8002e3e:	230c      	movs	r3, #12
 8002e40:	f8ca 3000 	str.w	r3, [sl]
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e54:	6921      	ldr	r1, [r4, #16]
 8002e56:	464a      	mov	r2, r9
 8002e58:	f7ff ff98 	bl	8002d8c <memcpy>
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e66:	81a3      	strh	r3, [r4, #12]
 8002e68:	6126      	str	r6, [r4, #16]
 8002e6a:	6165      	str	r5, [r4, #20]
 8002e6c:	444e      	add	r6, r9
 8002e6e:	eba5 0509 	sub.w	r5, r5, r9
 8002e72:	6026      	str	r6, [r4, #0]
 8002e74:	60a5      	str	r5, [r4, #8]
 8002e76:	463e      	mov	r6, r7
 8002e78:	42be      	cmp	r6, r7
 8002e7a:	d900      	bls.n	8002e7e <__ssputs_r+0x86>
 8002e7c:	463e      	mov	r6, r7
 8002e7e:	6820      	ldr	r0, [r4, #0]
 8002e80:	4632      	mov	r2, r6
 8002e82:	4641      	mov	r1, r8
 8002e84:	f000 faa8 	bl	80033d8 <memmove>
 8002e88:	68a3      	ldr	r3, [r4, #8]
 8002e8a:	1b9b      	subs	r3, r3, r6
 8002e8c:	60a3      	str	r3, [r4, #8]
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	4433      	add	r3, r6
 8002e92:	6023      	str	r3, [r4, #0]
 8002e94:	2000      	movs	r0, #0
 8002e96:	e7db      	b.n	8002e50 <__ssputs_r+0x58>
 8002e98:	462a      	mov	r2, r5
 8002e9a:	f000 fb97 	bl	80035cc <_realloc_r>
 8002e9e:	4606      	mov	r6, r0
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d1e1      	bne.n	8002e68 <__ssputs_r+0x70>
 8002ea4:	6921      	ldr	r1, [r4, #16]
 8002ea6:	4650      	mov	r0, sl
 8002ea8:	f000 fab0 	bl	800340c <_free_r>
 8002eac:	e7c7      	b.n	8002e3e <__ssputs_r+0x46>
	...

08002eb0 <_svfiprintf_r>:
 8002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	4698      	mov	r8, r3
 8002eb6:	898b      	ldrh	r3, [r1, #12]
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	b09d      	sub	sp, #116	; 0x74
 8002ebc:	4607      	mov	r7, r0
 8002ebe:	460d      	mov	r5, r1
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	d50e      	bpl.n	8002ee2 <_svfiprintf_r+0x32>
 8002ec4:	690b      	ldr	r3, [r1, #16]
 8002ec6:	b963      	cbnz	r3, 8002ee2 <_svfiprintf_r+0x32>
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	f000 fb0b 	bl	80034e4 <_malloc_r>
 8002ece:	6028      	str	r0, [r5, #0]
 8002ed0:	6128      	str	r0, [r5, #16]
 8002ed2:	b920      	cbnz	r0, 8002ede <_svfiprintf_r+0x2e>
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	e0d1      	b.n	8003082 <_svfiprintf_r+0x1d2>
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	616b      	str	r3, [r5, #20]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ef0:	2330      	movs	r3, #48	; 0x30
 8002ef2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800309c <_svfiprintf_r+0x1ec>
 8002ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002efa:	f04f 0901 	mov.w	r9, #1
 8002efe:	4623      	mov	r3, r4
 8002f00:	469a      	mov	sl, r3
 8002f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f06:	b10a      	cbz	r2, 8002f0c <_svfiprintf_r+0x5c>
 8002f08:	2a25      	cmp	r2, #37	; 0x25
 8002f0a:	d1f9      	bne.n	8002f00 <_svfiprintf_r+0x50>
 8002f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8002f10:	d00b      	beq.n	8002f2a <_svfiprintf_r+0x7a>
 8002f12:	465b      	mov	r3, fp
 8002f14:	4622      	mov	r2, r4
 8002f16:	4629      	mov	r1, r5
 8002f18:	4638      	mov	r0, r7
 8002f1a:	f7ff ff6d 	bl	8002df8 <__ssputs_r>
 8002f1e:	3001      	adds	r0, #1
 8002f20:	f000 80aa 	beq.w	8003078 <_svfiprintf_r+0x1c8>
 8002f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f26:	445a      	add	r2, fp
 8002f28:	9209      	str	r2, [sp, #36]	; 0x24
 8002f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80a2 	beq.w	8003078 <_svfiprintf_r+0x1c8>
 8002f34:	2300      	movs	r3, #0
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f3e:	f10a 0a01 	add.w	sl, sl, #1
 8002f42:	9304      	str	r3, [sp, #16]
 8002f44:	9307      	str	r3, [sp, #28]
 8002f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f4c:	4654      	mov	r4, sl
 8002f4e:	2205      	movs	r2, #5
 8002f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f54:	4851      	ldr	r0, [pc, #324]	; (800309c <_svfiprintf_r+0x1ec>)
 8002f56:	f7fd f94b 	bl	80001f0 <memchr>
 8002f5a:	9a04      	ldr	r2, [sp, #16]
 8002f5c:	b9d8      	cbnz	r0, 8002f96 <_svfiprintf_r+0xe6>
 8002f5e:	06d0      	lsls	r0, r2, #27
 8002f60:	bf44      	itt	mi
 8002f62:	2320      	movmi	r3, #32
 8002f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f68:	0711      	lsls	r1, r2, #28
 8002f6a:	bf44      	itt	mi
 8002f6c:	232b      	movmi	r3, #43	; 0x2b
 8002f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f72:	f89a 3000 	ldrb.w	r3, [sl]
 8002f76:	2b2a      	cmp	r3, #42	; 0x2a
 8002f78:	d015      	beq.n	8002fa6 <_svfiprintf_r+0xf6>
 8002f7a:	9a07      	ldr	r2, [sp, #28]
 8002f7c:	4654      	mov	r4, sl
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f04f 0c0a 	mov.w	ip, #10
 8002f84:	4621      	mov	r1, r4
 8002f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f8a:	3b30      	subs	r3, #48	; 0x30
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d94e      	bls.n	800302e <_svfiprintf_r+0x17e>
 8002f90:	b1b0      	cbz	r0, 8002fc0 <_svfiprintf_r+0x110>
 8002f92:	9207      	str	r2, [sp, #28]
 8002f94:	e014      	b.n	8002fc0 <_svfiprintf_r+0x110>
 8002f96:	eba0 0308 	sub.w	r3, r0, r8
 8002f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	9304      	str	r3, [sp, #16]
 8002fa2:	46a2      	mov	sl, r4
 8002fa4:	e7d2      	b.n	8002f4c <_svfiprintf_r+0x9c>
 8002fa6:	9b03      	ldr	r3, [sp, #12]
 8002fa8:	1d19      	adds	r1, r3, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	9103      	str	r1, [sp, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bfbb      	ittet	lt
 8002fb2:	425b      	neglt	r3, r3
 8002fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8002fb8:	9307      	strge	r3, [sp, #28]
 8002fba:	9307      	strlt	r3, [sp, #28]
 8002fbc:	bfb8      	it	lt
 8002fbe:	9204      	strlt	r2, [sp, #16]
 8002fc0:	7823      	ldrb	r3, [r4, #0]
 8002fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8002fc4:	d10c      	bne.n	8002fe0 <_svfiprintf_r+0x130>
 8002fc6:	7863      	ldrb	r3, [r4, #1]
 8002fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002fca:	d135      	bne.n	8003038 <_svfiprintf_r+0x188>
 8002fcc:	9b03      	ldr	r3, [sp, #12]
 8002fce:	1d1a      	adds	r2, r3, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	9203      	str	r2, [sp, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bfb8      	it	lt
 8002fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fdc:	3402      	adds	r4, #2
 8002fde:	9305      	str	r3, [sp, #20]
 8002fe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030ac <_svfiprintf_r+0x1fc>
 8002fe4:	7821      	ldrb	r1, [r4, #0]
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	4650      	mov	r0, sl
 8002fea:	f7fd f901 	bl	80001f0 <memchr>
 8002fee:	b140      	cbz	r0, 8003002 <_svfiprintf_r+0x152>
 8002ff0:	2340      	movs	r3, #64	; 0x40
 8002ff2:	eba0 000a 	sub.w	r0, r0, sl
 8002ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8002ffa:	9b04      	ldr	r3, [sp, #16]
 8002ffc:	4303      	orrs	r3, r0
 8002ffe:	3401      	adds	r4, #1
 8003000:	9304      	str	r3, [sp, #16]
 8003002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003006:	4826      	ldr	r0, [pc, #152]	; (80030a0 <_svfiprintf_r+0x1f0>)
 8003008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800300c:	2206      	movs	r2, #6
 800300e:	f7fd f8ef 	bl	80001f0 <memchr>
 8003012:	2800      	cmp	r0, #0
 8003014:	d038      	beq.n	8003088 <_svfiprintf_r+0x1d8>
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <_svfiprintf_r+0x1f4>)
 8003018:	bb1b      	cbnz	r3, 8003062 <_svfiprintf_r+0x1b2>
 800301a:	9b03      	ldr	r3, [sp, #12]
 800301c:	3307      	adds	r3, #7
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	3308      	adds	r3, #8
 8003024:	9303      	str	r3, [sp, #12]
 8003026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003028:	4433      	add	r3, r6
 800302a:	9309      	str	r3, [sp, #36]	; 0x24
 800302c:	e767      	b.n	8002efe <_svfiprintf_r+0x4e>
 800302e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003032:	460c      	mov	r4, r1
 8003034:	2001      	movs	r0, #1
 8003036:	e7a5      	b.n	8002f84 <_svfiprintf_r+0xd4>
 8003038:	2300      	movs	r3, #0
 800303a:	3401      	adds	r4, #1
 800303c:	9305      	str	r3, [sp, #20]
 800303e:	4619      	mov	r1, r3
 8003040:	f04f 0c0a 	mov.w	ip, #10
 8003044:	4620      	mov	r0, r4
 8003046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800304a:	3a30      	subs	r2, #48	; 0x30
 800304c:	2a09      	cmp	r2, #9
 800304e:	d903      	bls.n	8003058 <_svfiprintf_r+0x1a8>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0c5      	beq.n	8002fe0 <_svfiprintf_r+0x130>
 8003054:	9105      	str	r1, [sp, #20]
 8003056:	e7c3      	b.n	8002fe0 <_svfiprintf_r+0x130>
 8003058:	fb0c 2101 	mla	r1, ip, r1, r2
 800305c:	4604      	mov	r4, r0
 800305e:	2301      	movs	r3, #1
 8003060:	e7f0      	b.n	8003044 <_svfiprintf_r+0x194>
 8003062:	ab03      	add	r3, sp, #12
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	462a      	mov	r2, r5
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <_svfiprintf_r+0x1f8>)
 800306a:	a904      	add	r1, sp, #16
 800306c:	4638      	mov	r0, r7
 800306e:	f3af 8000 	nop.w
 8003072:	1c42      	adds	r2, r0, #1
 8003074:	4606      	mov	r6, r0
 8003076:	d1d6      	bne.n	8003026 <_svfiprintf_r+0x176>
 8003078:	89ab      	ldrh	r3, [r5, #12]
 800307a:	065b      	lsls	r3, r3, #25
 800307c:	f53f af2c 	bmi.w	8002ed8 <_svfiprintf_r+0x28>
 8003080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003082:	b01d      	add	sp, #116	; 0x74
 8003084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003088:	ab03      	add	r3, sp, #12
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	462a      	mov	r2, r5
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <_svfiprintf_r+0x1f8>)
 8003090:	a904      	add	r1, sp, #16
 8003092:	4638      	mov	r0, r7
 8003094:	f000 f87a 	bl	800318c <_printf_i>
 8003098:	e7eb      	b.n	8003072 <_svfiprintf_r+0x1c2>
 800309a:	bf00      	nop
 800309c:	080036bc 	.word	0x080036bc
 80030a0:	080036c6 	.word	0x080036c6
 80030a4:	00000000 	.word	0x00000000
 80030a8:	08002df9 	.word	0x08002df9
 80030ac:	080036c2 	.word	0x080036c2

080030b0 <_printf_common>:
 80030b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	4616      	mov	r6, r2
 80030b6:	4699      	mov	r9, r3
 80030b8:	688a      	ldr	r2, [r1, #8]
 80030ba:	690b      	ldr	r3, [r1, #16]
 80030bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	bfb8      	it	lt
 80030c4:	4613      	movlt	r3, r2
 80030c6:	6033      	str	r3, [r6, #0]
 80030c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030cc:	4607      	mov	r7, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	b10a      	cbz	r2, 80030d6 <_printf_common+0x26>
 80030d2:	3301      	adds	r3, #1
 80030d4:	6033      	str	r3, [r6, #0]
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	0699      	lsls	r1, r3, #26
 80030da:	bf42      	ittt	mi
 80030dc:	6833      	ldrmi	r3, [r6, #0]
 80030de:	3302      	addmi	r3, #2
 80030e0:	6033      	strmi	r3, [r6, #0]
 80030e2:	6825      	ldr	r5, [r4, #0]
 80030e4:	f015 0506 	ands.w	r5, r5, #6
 80030e8:	d106      	bne.n	80030f8 <_printf_common+0x48>
 80030ea:	f104 0a19 	add.w	sl, r4, #25
 80030ee:	68e3      	ldr	r3, [r4, #12]
 80030f0:	6832      	ldr	r2, [r6, #0]
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	42ab      	cmp	r3, r5
 80030f6:	dc26      	bgt.n	8003146 <_printf_common+0x96>
 80030f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030fc:	1e13      	subs	r3, r2, #0
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	bf18      	it	ne
 8003102:	2301      	movne	r3, #1
 8003104:	0692      	lsls	r2, r2, #26
 8003106:	d42b      	bmi.n	8003160 <_printf_common+0xb0>
 8003108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800310c:	4649      	mov	r1, r9
 800310e:	4638      	mov	r0, r7
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d01e      	beq.n	8003154 <_printf_common+0xa4>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	68e5      	ldr	r5, [r4, #12]
 800311a:	6832      	ldr	r2, [r6, #0]
 800311c:	f003 0306 	and.w	r3, r3, #6
 8003120:	2b04      	cmp	r3, #4
 8003122:	bf08      	it	eq
 8003124:	1aad      	subeq	r5, r5, r2
 8003126:	68a3      	ldr	r3, [r4, #8]
 8003128:	6922      	ldr	r2, [r4, #16]
 800312a:	bf0c      	ite	eq
 800312c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003130:	2500      	movne	r5, #0
 8003132:	4293      	cmp	r3, r2
 8003134:	bfc4      	itt	gt
 8003136:	1a9b      	subgt	r3, r3, r2
 8003138:	18ed      	addgt	r5, r5, r3
 800313a:	2600      	movs	r6, #0
 800313c:	341a      	adds	r4, #26
 800313e:	42b5      	cmp	r5, r6
 8003140:	d11a      	bne.n	8003178 <_printf_common+0xc8>
 8003142:	2000      	movs	r0, #0
 8003144:	e008      	b.n	8003158 <_printf_common+0xa8>
 8003146:	2301      	movs	r3, #1
 8003148:	4652      	mov	r2, sl
 800314a:	4649      	mov	r1, r9
 800314c:	4638      	mov	r0, r7
 800314e:	47c0      	blx	r8
 8003150:	3001      	adds	r0, #1
 8003152:	d103      	bne.n	800315c <_printf_common+0xac>
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800315c:	3501      	adds	r5, #1
 800315e:	e7c6      	b.n	80030ee <_printf_common+0x3e>
 8003160:	18e1      	adds	r1, r4, r3
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	2030      	movs	r0, #48	; 0x30
 8003166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800316a:	4422      	add	r2, r4
 800316c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003174:	3302      	adds	r3, #2
 8003176:	e7c7      	b.n	8003108 <_printf_common+0x58>
 8003178:	2301      	movs	r3, #1
 800317a:	4622      	mov	r2, r4
 800317c:	4649      	mov	r1, r9
 800317e:	4638      	mov	r0, r7
 8003180:	47c0      	blx	r8
 8003182:	3001      	adds	r0, #1
 8003184:	d0e6      	beq.n	8003154 <_printf_common+0xa4>
 8003186:	3601      	adds	r6, #1
 8003188:	e7d9      	b.n	800313e <_printf_common+0x8e>
	...

0800318c <_printf_i>:
 800318c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003190:	7e0f      	ldrb	r7, [r1, #24]
 8003192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003194:	2f78      	cmp	r7, #120	; 0x78
 8003196:	4691      	mov	r9, r2
 8003198:	4680      	mov	r8, r0
 800319a:	460c      	mov	r4, r1
 800319c:	469a      	mov	sl, r3
 800319e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031a2:	d807      	bhi.n	80031b4 <_printf_i+0x28>
 80031a4:	2f62      	cmp	r7, #98	; 0x62
 80031a6:	d80a      	bhi.n	80031be <_printf_i+0x32>
 80031a8:	2f00      	cmp	r7, #0
 80031aa:	f000 80d8 	beq.w	800335e <_printf_i+0x1d2>
 80031ae:	2f58      	cmp	r7, #88	; 0x58
 80031b0:	f000 80a3 	beq.w	80032fa <_printf_i+0x16e>
 80031b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031bc:	e03a      	b.n	8003234 <_printf_i+0xa8>
 80031be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031c2:	2b15      	cmp	r3, #21
 80031c4:	d8f6      	bhi.n	80031b4 <_printf_i+0x28>
 80031c6:	a101      	add	r1, pc, #4	; (adr r1, 80031cc <_printf_i+0x40>)
 80031c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031cc:	08003225 	.word	0x08003225
 80031d0:	08003239 	.word	0x08003239
 80031d4:	080031b5 	.word	0x080031b5
 80031d8:	080031b5 	.word	0x080031b5
 80031dc:	080031b5 	.word	0x080031b5
 80031e0:	080031b5 	.word	0x080031b5
 80031e4:	08003239 	.word	0x08003239
 80031e8:	080031b5 	.word	0x080031b5
 80031ec:	080031b5 	.word	0x080031b5
 80031f0:	080031b5 	.word	0x080031b5
 80031f4:	080031b5 	.word	0x080031b5
 80031f8:	08003345 	.word	0x08003345
 80031fc:	08003269 	.word	0x08003269
 8003200:	08003327 	.word	0x08003327
 8003204:	080031b5 	.word	0x080031b5
 8003208:	080031b5 	.word	0x080031b5
 800320c:	08003367 	.word	0x08003367
 8003210:	080031b5 	.word	0x080031b5
 8003214:	08003269 	.word	0x08003269
 8003218:	080031b5 	.word	0x080031b5
 800321c:	080031b5 	.word	0x080031b5
 8003220:	0800332f 	.word	0x0800332f
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	1d1a      	adds	r2, r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	602a      	str	r2, [r5, #0]
 800322c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003234:	2301      	movs	r3, #1
 8003236:	e0a3      	b.n	8003380 <_printf_i+0x1f4>
 8003238:	6820      	ldr	r0, [r4, #0]
 800323a:	6829      	ldr	r1, [r5, #0]
 800323c:	0606      	lsls	r6, r0, #24
 800323e:	f101 0304 	add.w	r3, r1, #4
 8003242:	d50a      	bpl.n	800325a <_printf_i+0xce>
 8003244:	680e      	ldr	r6, [r1, #0]
 8003246:	602b      	str	r3, [r5, #0]
 8003248:	2e00      	cmp	r6, #0
 800324a:	da03      	bge.n	8003254 <_printf_i+0xc8>
 800324c:	232d      	movs	r3, #45	; 0x2d
 800324e:	4276      	negs	r6, r6
 8003250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003254:	485e      	ldr	r0, [pc, #376]	; (80033d0 <_printf_i+0x244>)
 8003256:	230a      	movs	r3, #10
 8003258:	e019      	b.n	800328e <_printf_i+0x102>
 800325a:	680e      	ldr	r6, [r1, #0]
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003262:	bf18      	it	ne
 8003264:	b236      	sxthne	r6, r6
 8003266:	e7ef      	b.n	8003248 <_printf_i+0xbc>
 8003268:	682b      	ldr	r3, [r5, #0]
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	1d19      	adds	r1, r3, #4
 800326e:	6029      	str	r1, [r5, #0]
 8003270:	0601      	lsls	r1, r0, #24
 8003272:	d501      	bpl.n	8003278 <_printf_i+0xec>
 8003274:	681e      	ldr	r6, [r3, #0]
 8003276:	e002      	b.n	800327e <_printf_i+0xf2>
 8003278:	0646      	lsls	r6, r0, #25
 800327a:	d5fb      	bpl.n	8003274 <_printf_i+0xe8>
 800327c:	881e      	ldrh	r6, [r3, #0]
 800327e:	4854      	ldr	r0, [pc, #336]	; (80033d0 <_printf_i+0x244>)
 8003280:	2f6f      	cmp	r7, #111	; 0x6f
 8003282:	bf0c      	ite	eq
 8003284:	2308      	moveq	r3, #8
 8003286:	230a      	movne	r3, #10
 8003288:	2100      	movs	r1, #0
 800328a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800328e:	6865      	ldr	r5, [r4, #4]
 8003290:	60a5      	str	r5, [r4, #8]
 8003292:	2d00      	cmp	r5, #0
 8003294:	bfa2      	ittt	ge
 8003296:	6821      	ldrge	r1, [r4, #0]
 8003298:	f021 0104 	bicge.w	r1, r1, #4
 800329c:	6021      	strge	r1, [r4, #0]
 800329e:	b90e      	cbnz	r6, 80032a4 <_printf_i+0x118>
 80032a0:	2d00      	cmp	r5, #0
 80032a2:	d04d      	beq.n	8003340 <_printf_i+0x1b4>
 80032a4:	4615      	mov	r5, r2
 80032a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80032aa:	fb03 6711 	mls	r7, r3, r1, r6
 80032ae:	5dc7      	ldrb	r7, [r0, r7]
 80032b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032b4:	4637      	mov	r7, r6
 80032b6:	42bb      	cmp	r3, r7
 80032b8:	460e      	mov	r6, r1
 80032ba:	d9f4      	bls.n	80032a6 <_printf_i+0x11a>
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d10b      	bne.n	80032d8 <_printf_i+0x14c>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	07de      	lsls	r6, r3, #31
 80032c4:	d508      	bpl.n	80032d8 <_printf_i+0x14c>
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	6861      	ldr	r1, [r4, #4]
 80032ca:	4299      	cmp	r1, r3
 80032cc:	bfde      	ittt	le
 80032ce:	2330      	movle	r3, #48	; 0x30
 80032d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032d8:	1b52      	subs	r2, r2, r5
 80032da:	6122      	str	r2, [r4, #16]
 80032dc:	f8cd a000 	str.w	sl, [sp]
 80032e0:	464b      	mov	r3, r9
 80032e2:	aa03      	add	r2, sp, #12
 80032e4:	4621      	mov	r1, r4
 80032e6:	4640      	mov	r0, r8
 80032e8:	f7ff fee2 	bl	80030b0 <_printf_common>
 80032ec:	3001      	adds	r0, #1
 80032ee:	d14c      	bne.n	800338a <_printf_i+0x1fe>
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	b004      	add	sp, #16
 80032f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032fa:	4835      	ldr	r0, [pc, #212]	; (80033d0 <_printf_i+0x244>)
 80032fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003300:	6829      	ldr	r1, [r5, #0]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	f851 6b04 	ldr.w	r6, [r1], #4
 8003308:	6029      	str	r1, [r5, #0]
 800330a:	061d      	lsls	r5, r3, #24
 800330c:	d514      	bpl.n	8003338 <_printf_i+0x1ac>
 800330e:	07df      	lsls	r7, r3, #31
 8003310:	bf44      	itt	mi
 8003312:	f043 0320 	orrmi.w	r3, r3, #32
 8003316:	6023      	strmi	r3, [r4, #0]
 8003318:	b91e      	cbnz	r6, 8003322 <_printf_i+0x196>
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	f023 0320 	bic.w	r3, r3, #32
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	2310      	movs	r3, #16
 8003324:	e7b0      	b.n	8003288 <_printf_i+0xfc>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	f043 0320 	orr.w	r3, r3, #32
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	2378      	movs	r3, #120	; 0x78
 8003330:	4828      	ldr	r0, [pc, #160]	; (80033d4 <_printf_i+0x248>)
 8003332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003336:	e7e3      	b.n	8003300 <_printf_i+0x174>
 8003338:	0659      	lsls	r1, r3, #25
 800333a:	bf48      	it	mi
 800333c:	b2b6      	uxthmi	r6, r6
 800333e:	e7e6      	b.n	800330e <_printf_i+0x182>
 8003340:	4615      	mov	r5, r2
 8003342:	e7bb      	b.n	80032bc <_printf_i+0x130>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	6826      	ldr	r6, [r4, #0]
 8003348:	6961      	ldr	r1, [r4, #20]
 800334a:	1d18      	adds	r0, r3, #4
 800334c:	6028      	str	r0, [r5, #0]
 800334e:	0635      	lsls	r5, r6, #24
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	d501      	bpl.n	8003358 <_printf_i+0x1cc>
 8003354:	6019      	str	r1, [r3, #0]
 8003356:	e002      	b.n	800335e <_printf_i+0x1d2>
 8003358:	0670      	lsls	r0, r6, #25
 800335a:	d5fb      	bpl.n	8003354 <_printf_i+0x1c8>
 800335c:	8019      	strh	r1, [r3, #0]
 800335e:	2300      	movs	r3, #0
 8003360:	6123      	str	r3, [r4, #16]
 8003362:	4615      	mov	r5, r2
 8003364:	e7ba      	b.n	80032dc <_printf_i+0x150>
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	1d1a      	adds	r2, r3, #4
 800336a:	602a      	str	r2, [r5, #0]
 800336c:	681d      	ldr	r5, [r3, #0]
 800336e:	6862      	ldr	r2, [r4, #4]
 8003370:	2100      	movs	r1, #0
 8003372:	4628      	mov	r0, r5
 8003374:	f7fc ff3c 	bl	80001f0 <memchr>
 8003378:	b108      	cbz	r0, 800337e <_printf_i+0x1f2>
 800337a:	1b40      	subs	r0, r0, r5
 800337c:	6060      	str	r0, [r4, #4]
 800337e:	6863      	ldr	r3, [r4, #4]
 8003380:	6123      	str	r3, [r4, #16]
 8003382:	2300      	movs	r3, #0
 8003384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003388:	e7a8      	b.n	80032dc <_printf_i+0x150>
 800338a:	6923      	ldr	r3, [r4, #16]
 800338c:	462a      	mov	r2, r5
 800338e:	4649      	mov	r1, r9
 8003390:	4640      	mov	r0, r8
 8003392:	47d0      	blx	sl
 8003394:	3001      	adds	r0, #1
 8003396:	d0ab      	beq.n	80032f0 <_printf_i+0x164>
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	079b      	lsls	r3, r3, #30
 800339c:	d413      	bmi.n	80033c6 <_printf_i+0x23a>
 800339e:	68e0      	ldr	r0, [r4, #12]
 80033a0:	9b03      	ldr	r3, [sp, #12]
 80033a2:	4298      	cmp	r0, r3
 80033a4:	bfb8      	it	lt
 80033a6:	4618      	movlt	r0, r3
 80033a8:	e7a4      	b.n	80032f4 <_printf_i+0x168>
 80033aa:	2301      	movs	r3, #1
 80033ac:	4632      	mov	r2, r6
 80033ae:	4649      	mov	r1, r9
 80033b0:	4640      	mov	r0, r8
 80033b2:	47d0      	blx	sl
 80033b4:	3001      	adds	r0, #1
 80033b6:	d09b      	beq.n	80032f0 <_printf_i+0x164>
 80033b8:	3501      	adds	r5, #1
 80033ba:	68e3      	ldr	r3, [r4, #12]
 80033bc:	9903      	ldr	r1, [sp, #12]
 80033be:	1a5b      	subs	r3, r3, r1
 80033c0:	42ab      	cmp	r3, r5
 80033c2:	dcf2      	bgt.n	80033aa <_printf_i+0x21e>
 80033c4:	e7eb      	b.n	800339e <_printf_i+0x212>
 80033c6:	2500      	movs	r5, #0
 80033c8:	f104 0619 	add.w	r6, r4, #25
 80033cc:	e7f5      	b.n	80033ba <_printf_i+0x22e>
 80033ce:	bf00      	nop
 80033d0:	080036cd 	.word	0x080036cd
 80033d4:	080036de 	.word	0x080036de

080033d8 <memmove>:
 80033d8:	4288      	cmp	r0, r1
 80033da:	b510      	push	{r4, lr}
 80033dc:	eb01 0402 	add.w	r4, r1, r2
 80033e0:	d902      	bls.n	80033e8 <memmove+0x10>
 80033e2:	4284      	cmp	r4, r0
 80033e4:	4623      	mov	r3, r4
 80033e6:	d807      	bhi.n	80033f8 <memmove+0x20>
 80033e8:	1e43      	subs	r3, r0, #1
 80033ea:	42a1      	cmp	r1, r4
 80033ec:	d008      	beq.n	8003400 <memmove+0x28>
 80033ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033f6:	e7f8      	b.n	80033ea <memmove+0x12>
 80033f8:	4402      	add	r2, r0
 80033fa:	4601      	mov	r1, r0
 80033fc:	428a      	cmp	r2, r1
 80033fe:	d100      	bne.n	8003402 <memmove+0x2a>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800340a:	e7f7      	b.n	80033fc <memmove+0x24>

0800340c <_free_r>:
 800340c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800340e:	2900      	cmp	r1, #0
 8003410:	d044      	beq.n	800349c <_free_r+0x90>
 8003412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003416:	9001      	str	r0, [sp, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f1a1 0404 	sub.w	r4, r1, #4
 800341e:	bfb8      	it	lt
 8003420:	18e4      	addlt	r4, r4, r3
 8003422:	f000 f913 	bl	800364c <__malloc_lock>
 8003426:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <_free_r+0x94>)
 8003428:	9801      	ldr	r0, [sp, #4]
 800342a:	6813      	ldr	r3, [r2, #0]
 800342c:	b933      	cbnz	r3, 800343c <_free_r+0x30>
 800342e:	6063      	str	r3, [r4, #4]
 8003430:	6014      	str	r4, [r2, #0]
 8003432:	b003      	add	sp, #12
 8003434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003438:	f000 b90e 	b.w	8003658 <__malloc_unlock>
 800343c:	42a3      	cmp	r3, r4
 800343e:	d908      	bls.n	8003452 <_free_r+0x46>
 8003440:	6825      	ldr	r5, [r4, #0]
 8003442:	1961      	adds	r1, r4, r5
 8003444:	428b      	cmp	r3, r1
 8003446:	bf01      	itttt	eq
 8003448:	6819      	ldreq	r1, [r3, #0]
 800344a:	685b      	ldreq	r3, [r3, #4]
 800344c:	1949      	addeq	r1, r1, r5
 800344e:	6021      	streq	r1, [r4, #0]
 8003450:	e7ed      	b.n	800342e <_free_r+0x22>
 8003452:	461a      	mov	r2, r3
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	b10b      	cbz	r3, 800345c <_free_r+0x50>
 8003458:	42a3      	cmp	r3, r4
 800345a:	d9fa      	bls.n	8003452 <_free_r+0x46>
 800345c:	6811      	ldr	r1, [r2, #0]
 800345e:	1855      	adds	r5, r2, r1
 8003460:	42a5      	cmp	r5, r4
 8003462:	d10b      	bne.n	800347c <_free_r+0x70>
 8003464:	6824      	ldr	r4, [r4, #0]
 8003466:	4421      	add	r1, r4
 8003468:	1854      	adds	r4, r2, r1
 800346a:	42a3      	cmp	r3, r4
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	d1e0      	bne.n	8003432 <_free_r+0x26>
 8003470:	681c      	ldr	r4, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	6053      	str	r3, [r2, #4]
 8003476:	4421      	add	r1, r4
 8003478:	6011      	str	r1, [r2, #0]
 800347a:	e7da      	b.n	8003432 <_free_r+0x26>
 800347c:	d902      	bls.n	8003484 <_free_r+0x78>
 800347e:	230c      	movs	r3, #12
 8003480:	6003      	str	r3, [r0, #0]
 8003482:	e7d6      	b.n	8003432 <_free_r+0x26>
 8003484:	6825      	ldr	r5, [r4, #0]
 8003486:	1961      	adds	r1, r4, r5
 8003488:	428b      	cmp	r3, r1
 800348a:	bf04      	itt	eq
 800348c:	6819      	ldreq	r1, [r3, #0]
 800348e:	685b      	ldreq	r3, [r3, #4]
 8003490:	6063      	str	r3, [r4, #4]
 8003492:	bf04      	itt	eq
 8003494:	1949      	addeq	r1, r1, r5
 8003496:	6021      	streq	r1, [r4, #0]
 8003498:	6054      	str	r4, [r2, #4]
 800349a:	e7ca      	b.n	8003432 <_free_r+0x26>
 800349c:	b003      	add	sp, #12
 800349e:	bd30      	pop	{r4, r5, pc}
 80034a0:	20000128 	.word	0x20000128

080034a4 <sbrk_aligned>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4e0e      	ldr	r6, [pc, #56]	; (80034e0 <sbrk_aligned+0x3c>)
 80034a8:	460c      	mov	r4, r1
 80034aa:	6831      	ldr	r1, [r6, #0]
 80034ac:	4605      	mov	r5, r0
 80034ae:	b911      	cbnz	r1, 80034b6 <sbrk_aligned+0x12>
 80034b0:	f000 f8bc 	bl	800362c <_sbrk_r>
 80034b4:	6030      	str	r0, [r6, #0]
 80034b6:	4621      	mov	r1, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 f8b7 	bl	800362c <_sbrk_r>
 80034be:	1c43      	adds	r3, r0, #1
 80034c0:	d00a      	beq.n	80034d8 <sbrk_aligned+0x34>
 80034c2:	1cc4      	adds	r4, r0, #3
 80034c4:	f024 0403 	bic.w	r4, r4, #3
 80034c8:	42a0      	cmp	r0, r4
 80034ca:	d007      	beq.n	80034dc <sbrk_aligned+0x38>
 80034cc:	1a21      	subs	r1, r4, r0
 80034ce:	4628      	mov	r0, r5
 80034d0:	f000 f8ac 	bl	800362c <_sbrk_r>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d101      	bne.n	80034dc <sbrk_aligned+0x38>
 80034d8:	f04f 34ff 	mov.w	r4, #4294967295
 80034dc:	4620      	mov	r0, r4
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	2000012c 	.word	0x2000012c

080034e4 <_malloc_r>:
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	1ccd      	adds	r5, r1, #3
 80034ea:	f025 0503 	bic.w	r5, r5, #3
 80034ee:	3508      	adds	r5, #8
 80034f0:	2d0c      	cmp	r5, #12
 80034f2:	bf38      	it	cc
 80034f4:	250c      	movcc	r5, #12
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	4607      	mov	r7, r0
 80034fa:	db01      	blt.n	8003500 <_malloc_r+0x1c>
 80034fc:	42a9      	cmp	r1, r5
 80034fe:	d905      	bls.n	800350c <_malloc_r+0x28>
 8003500:	230c      	movs	r3, #12
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	2600      	movs	r6, #0
 8003506:	4630      	mov	r0, r6
 8003508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800350c:	4e2e      	ldr	r6, [pc, #184]	; (80035c8 <_malloc_r+0xe4>)
 800350e:	f000 f89d 	bl	800364c <__malloc_lock>
 8003512:	6833      	ldr	r3, [r6, #0]
 8003514:	461c      	mov	r4, r3
 8003516:	bb34      	cbnz	r4, 8003566 <_malloc_r+0x82>
 8003518:	4629      	mov	r1, r5
 800351a:	4638      	mov	r0, r7
 800351c:	f7ff ffc2 	bl	80034a4 <sbrk_aligned>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	4604      	mov	r4, r0
 8003524:	d14d      	bne.n	80035c2 <_malloc_r+0xde>
 8003526:	6834      	ldr	r4, [r6, #0]
 8003528:	4626      	mov	r6, r4
 800352a:	2e00      	cmp	r6, #0
 800352c:	d140      	bne.n	80035b0 <_malloc_r+0xcc>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	4631      	mov	r1, r6
 8003532:	4638      	mov	r0, r7
 8003534:	eb04 0803 	add.w	r8, r4, r3
 8003538:	f000 f878 	bl	800362c <_sbrk_r>
 800353c:	4580      	cmp	r8, r0
 800353e:	d13a      	bne.n	80035b6 <_malloc_r+0xd2>
 8003540:	6821      	ldr	r1, [r4, #0]
 8003542:	3503      	adds	r5, #3
 8003544:	1a6d      	subs	r5, r5, r1
 8003546:	f025 0503 	bic.w	r5, r5, #3
 800354a:	3508      	adds	r5, #8
 800354c:	2d0c      	cmp	r5, #12
 800354e:	bf38      	it	cc
 8003550:	250c      	movcc	r5, #12
 8003552:	4629      	mov	r1, r5
 8003554:	4638      	mov	r0, r7
 8003556:	f7ff ffa5 	bl	80034a4 <sbrk_aligned>
 800355a:	3001      	adds	r0, #1
 800355c:	d02b      	beq.n	80035b6 <_malloc_r+0xd2>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	442b      	add	r3, r5
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	e00e      	b.n	8003584 <_malloc_r+0xa0>
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	1b52      	subs	r2, r2, r5
 800356a:	d41e      	bmi.n	80035aa <_malloc_r+0xc6>
 800356c:	2a0b      	cmp	r2, #11
 800356e:	d916      	bls.n	800359e <_malloc_r+0xba>
 8003570:	1961      	adds	r1, r4, r5
 8003572:	42a3      	cmp	r3, r4
 8003574:	6025      	str	r5, [r4, #0]
 8003576:	bf18      	it	ne
 8003578:	6059      	strne	r1, [r3, #4]
 800357a:	6863      	ldr	r3, [r4, #4]
 800357c:	bf08      	it	eq
 800357e:	6031      	streq	r1, [r6, #0]
 8003580:	5162      	str	r2, [r4, r5]
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	4638      	mov	r0, r7
 8003586:	f104 060b 	add.w	r6, r4, #11
 800358a:	f000 f865 	bl	8003658 <__malloc_unlock>
 800358e:	f026 0607 	bic.w	r6, r6, #7
 8003592:	1d23      	adds	r3, r4, #4
 8003594:	1af2      	subs	r2, r6, r3
 8003596:	d0b6      	beq.n	8003506 <_malloc_r+0x22>
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	50a3      	str	r3, [r4, r2]
 800359c:	e7b3      	b.n	8003506 <_malloc_r+0x22>
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	bf0c      	ite	eq
 80035a4:	6032      	streq	r2, [r6, #0]
 80035a6:	605a      	strne	r2, [r3, #4]
 80035a8:	e7ec      	b.n	8003584 <_malloc_r+0xa0>
 80035aa:	4623      	mov	r3, r4
 80035ac:	6864      	ldr	r4, [r4, #4]
 80035ae:	e7b2      	b.n	8003516 <_malloc_r+0x32>
 80035b0:	4634      	mov	r4, r6
 80035b2:	6876      	ldr	r6, [r6, #4]
 80035b4:	e7b9      	b.n	800352a <_malloc_r+0x46>
 80035b6:	230c      	movs	r3, #12
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4638      	mov	r0, r7
 80035bc:	f000 f84c 	bl	8003658 <__malloc_unlock>
 80035c0:	e7a1      	b.n	8003506 <_malloc_r+0x22>
 80035c2:	6025      	str	r5, [r4, #0]
 80035c4:	e7de      	b.n	8003584 <_malloc_r+0xa0>
 80035c6:	bf00      	nop
 80035c8:	20000128 	.word	0x20000128

080035cc <_realloc_r>:
 80035cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d0:	4680      	mov	r8, r0
 80035d2:	4614      	mov	r4, r2
 80035d4:	460e      	mov	r6, r1
 80035d6:	b921      	cbnz	r1, 80035e2 <_realloc_r+0x16>
 80035d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	4611      	mov	r1, r2
 80035de:	f7ff bf81 	b.w	80034e4 <_malloc_r>
 80035e2:	b92a      	cbnz	r2, 80035f0 <_realloc_r+0x24>
 80035e4:	f7ff ff12 	bl	800340c <_free_r>
 80035e8:	4625      	mov	r5, r4
 80035ea:	4628      	mov	r0, r5
 80035ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035f0:	f000 f838 	bl	8003664 <_malloc_usable_size_r>
 80035f4:	4284      	cmp	r4, r0
 80035f6:	4607      	mov	r7, r0
 80035f8:	d802      	bhi.n	8003600 <_realloc_r+0x34>
 80035fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035fe:	d812      	bhi.n	8003626 <_realloc_r+0x5a>
 8003600:	4621      	mov	r1, r4
 8003602:	4640      	mov	r0, r8
 8003604:	f7ff ff6e 	bl	80034e4 <_malloc_r>
 8003608:	4605      	mov	r5, r0
 800360a:	2800      	cmp	r0, #0
 800360c:	d0ed      	beq.n	80035ea <_realloc_r+0x1e>
 800360e:	42bc      	cmp	r4, r7
 8003610:	4622      	mov	r2, r4
 8003612:	4631      	mov	r1, r6
 8003614:	bf28      	it	cs
 8003616:	463a      	movcs	r2, r7
 8003618:	f7ff fbb8 	bl	8002d8c <memcpy>
 800361c:	4631      	mov	r1, r6
 800361e:	4640      	mov	r0, r8
 8003620:	f7ff fef4 	bl	800340c <_free_r>
 8003624:	e7e1      	b.n	80035ea <_realloc_r+0x1e>
 8003626:	4635      	mov	r5, r6
 8003628:	e7df      	b.n	80035ea <_realloc_r+0x1e>
	...

0800362c <_sbrk_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4d06      	ldr	r5, [pc, #24]	; (8003648 <_sbrk_r+0x1c>)
 8003630:	2300      	movs	r3, #0
 8003632:	4604      	mov	r4, r0
 8003634:	4608      	mov	r0, r1
 8003636:	602b      	str	r3, [r5, #0]
 8003638:	f7fd fac0 	bl	8000bbc <_sbrk>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	d102      	bne.n	8003646 <_sbrk_r+0x1a>
 8003640:	682b      	ldr	r3, [r5, #0]
 8003642:	b103      	cbz	r3, 8003646 <_sbrk_r+0x1a>
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	bd38      	pop	{r3, r4, r5, pc}
 8003648:	20000130 	.word	0x20000130

0800364c <__malloc_lock>:
 800364c:	4801      	ldr	r0, [pc, #4]	; (8003654 <__malloc_lock+0x8>)
 800364e:	f000 b811 	b.w	8003674 <__retarget_lock_acquire_recursive>
 8003652:	bf00      	nop
 8003654:	20000134 	.word	0x20000134

08003658 <__malloc_unlock>:
 8003658:	4801      	ldr	r0, [pc, #4]	; (8003660 <__malloc_unlock+0x8>)
 800365a:	f000 b80c 	b.w	8003676 <__retarget_lock_release_recursive>
 800365e:	bf00      	nop
 8003660:	20000134 	.word	0x20000134

08003664 <_malloc_usable_size_r>:
 8003664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003668:	1f18      	subs	r0, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	bfbc      	itt	lt
 800366e:	580b      	ldrlt	r3, [r1, r0]
 8003670:	18c0      	addlt	r0, r0, r3
 8003672:	4770      	bx	lr

08003674 <__retarget_lock_acquire_recursive>:
 8003674:	4770      	bx	lr

08003676 <__retarget_lock_release_recursive>:
 8003676:	4770      	bx	lr

08003678 <_init>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr

08003684 <_fini>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr
